{"ast":null,"code":"\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\n\nfunction isRenetworkable(value) {\n  return value && typeof value.renetwork === \"function\";\n}\n\nfunction ethDefaultProvider(network) {\n  const func = function (providers, options) {\n    if (options == null) {\n      options = {};\n    }\n\n    const providerList = [];\n\n    if (providers.InfuraProvider) {\n      try {\n        providerList.push(new providers.InfuraProvider(network, options.infura));\n      } catch (error) {}\n    }\n\n    if (providers.EtherscanProvider) {\n      try {\n        providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n      } catch (error) {}\n    }\n\n    if (providers.AlchemyProvider) {\n      try {\n        providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n      } catch (error) {}\n    }\n\n    if (providers.PocketProvider) {\n      // These networks are currently faulty on Pocket as their\n      // network does not handle the Berlin hardfork, which is\n      // live on these ones.\n      // @TODO: This goes away once Pocket has upgraded their nodes\n      const skip = [\"goerli\", \"ropsten\", \"rinkeby\"];\n\n      try {\n        const provider = new providers.PocketProvider(network);\n\n        if (provider.network && skip.indexOf(provider.network.name) === -1) {\n          providerList.push(provider);\n        }\n      } catch (error) {}\n    }\n\n    if (providers.CloudflareProvider) {\n      try {\n        providerList.push(new providers.CloudflareProvider(network));\n      } catch (error) {}\n    }\n\n    if (providerList.length === 0) {\n      return null;\n    }\n\n    if (providers.FallbackProvider) {\n      let quorum = 1;\n\n      if (options.quorum != null) {\n        quorum = options.quorum;\n      } else if (network === \"homestead\") {\n        quorum = 2;\n      }\n\n      return new providers.FallbackProvider(providerList, quorum);\n    }\n\n    return providerList[0];\n  };\n\n  func.renetwork = function (network) {\n    return ethDefaultProvider(network);\n  };\n\n  return func;\n}\n\nfunction etcDefaultProvider(url, network) {\n  const func = function (providers, options) {\n    if (providers.JsonRpcProvider) {\n      return new providers.JsonRpcProvider(url, network);\n    }\n\n    return null;\n  };\n\n  func.renetwork = function (network) {\n    return etcDefaultProvider(url, network);\n  };\n\n  return func;\n}\n\nconst homestead = {\n  chainId: 1,\n  ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  name: \"homestead\",\n  _defaultProvider: ethDefaultProvider(\"homestead\")\n};\nconst ropsten = {\n  chainId: 3,\n  ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  name: \"ropsten\",\n  _defaultProvider: ethDefaultProvider(\"ropsten\")\n};\nconst classicMordor = {\n  chainId: 63,\n  name: \"classicMordor\",\n  _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n};\nconst networks = {\n  unspecified: {\n    chainId: 0,\n    name: \"unspecified\"\n  },\n  homestead: homestead,\n  mainnet: homestead,\n  morden: {\n    chainId: 2,\n    name: \"morden\"\n  },\n  ropsten: ropsten,\n  testnet: ropsten,\n  rinkeby: {\n    chainId: 4,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"rinkeby\",\n    _defaultProvider: ethDefaultProvider(\"rinkeby\")\n  },\n  kovan: {\n    chainId: 42,\n    name: \"kovan\",\n    _defaultProvider: ethDefaultProvider(\"kovan\")\n  },\n  goerli: {\n    chainId: 5,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"goerli\",\n    _defaultProvider: ethDefaultProvider(\"goerli\")\n  },\n  // ETC (See: #351)\n  classic: {\n    chainId: 61,\n    name: \"classic\",\n    _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/etc\", \"classic\")\n  },\n  classicMorden: {\n    chainId: 62,\n    name: \"classicMorden\"\n  },\n  classicMordor: classicMordor,\n  classicTestnet: classicMordor,\n  classicKotti: {\n    chainId: 6,\n    name: \"classicKotti\",\n    _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/kotti\", \"classicKotti\")\n  },\n  xdai: {\n    chainId: 100,\n    name: \"xdai\"\n  },\n  matic: {\n    chainId: 137,\n    name: \"matic\"\n  },\n  maticmum: {\n    chainId: 80001,\n    name: \"maticmum\"\n  },\n  bnb: {\n    chainId: 56,\n    name: \"bnb\"\n  },\n  bnbt: {\n    chainId: 97,\n    name: \"bnbt\"\n  }\n};\n/**\n *  getNetwork\n *\n *  Converts a named common networks or chain ID (network ID) to a Network\n *  and verifies a network is a valid Network..\n */\n\nexport function getNetwork(network) {\n  // No network (null)\n  if (network == null) {\n    return null;\n  }\n\n  if (typeof network === \"number\") {\n    for (const name in networks) {\n      const standard = networks[name];\n\n      if (standard.chainId === network) {\n        return {\n          name: standard.name,\n          chainId: standard.chainId,\n          ensAddress: standard.ensAddress || null,\n          _defaultProvider: standard._defaultProvider || null\n        };\n      }\n    }\n\n    return {\n      chainId: network,\n      name: \"unknown\"\n    };\n  }\n\n  if (typeof network === \"string\") {\n    const standard = networks[network];\n\n    if (standard == null) {\n      return null;\n    }\n\n    return {\n      name: standard.name,\n      chainId: standard.chainId,\n      ensAddress: standard.ensAddress,\n      _defaultProvider: standard._defaultProvider || null\n    };\n  }\n\n  const standard = networks[network.name]; // Not a standard network; check that it is a valid network in general\n\n  if (!standard) {\n    if (typeof network.chainId !== \"number\") {\n      logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n    }\n\n    return network;\n  } // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n\n\n  if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n    logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n  } // @TODO: In the next major version add an attach function to a defaultProvider\n  // class and move the _defaultProvider internal to this file (extend Network)\n\n\n  let defaultProvider = network._defaultProvider || null;\n\n  if (defaultProvider == null && standard._defaultProvider) {\n    if (isRenetworkable(standard._defaultProvider)) {\n      defaultProvider = standard._defaultProvider.renetwork(network);\n    } else {\n      defaultProvider = standard._defaultProvider;\n    }\n  } // Standard Network (allow overriding the ENS address)\n\n\n  return {\n    name: network.name,\n    chainId: standard.chainId,\n    ensAddress: network.ensAddress || standard.ensAddress || null,\n    _defaultProvider: defaultProvider\n  };\n}","map":{"version":3,"mappings":"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","names":["Logger","version","logger","isRenetworkable","value","renetwork","ethDefaultProvider","network","func","providers","options","providerList","InfuraProvider","push","infura","error","EtherscanProvider","etherscan","AlchemyProvider","alchemy","PocketProvider","skip","provider","indexOf","name","CloudflareProvider","length","FallbackProvider","quorum","etcDefaultProvider","url","JsonRpcProvider","homestead","chainId","ensAddress","_defaultProvider","ropsten","classicMordor","networks","unspecified","mainnet","morden","testnet","rinkeby","kovan","goerli","classic","classicMorden","classicTestnet","classicKotti","xdai","matic","maticmum","bnb","bnbt","getNetwork","standard","throwArgumentError","defaultProvider"],"sourceRoot":"","sources":["../src.ts/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}