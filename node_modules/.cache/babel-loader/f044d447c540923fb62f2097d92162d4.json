{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ForkEvent, Provider } from \"@ethersproject/abstract-provider\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { namehash } from \"@ethersproject/hash\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport bech32 from \"bech32\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Formatter } from \"./formatter\"; //////////////////////////////\n// Event Serializeing\n\nfunction checkTopic(topic) {\n  if (topic == null) {\n    return \"null\";\n  }\n\n  if (hexDataLength(topic) !== 32) {\n    logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n  }\n\n  return topic.toLowerCase();\n}\n\nfunction serializeTopics(topics) {\n  // Remove trailing null AND-topics; they are redundant\n  topics = topics.slice();\n\n  while (topics.length > 0 && topics[topics.length - 1] == null) {\n    topics.pop();\n  }\n\n  return topics.map(topic => {\n    if (Array.isArray(topic)) {\n      // Only track unique OR-topics\n      const unique = {};\n      topic.forEach(topic => {\n        unique[checkTopic(topic)] = true;\n      }); // The order of OR-topics does not matter\n\n      const sorted = Object.keys(unique);\n      sorted.sort();\n      return sorted.join(\"|\");\n    } else {\n      return checkTopic(topic);\n    }\n  }).join(\"&\");\n}\n\nfunction deserializeTopics(data) {\n  if (data === \"\") {\n    return [];\n  }\n\n  return data.split(/&/g).map(topic => {\n    if (topic === \"\") {\n      return [];\n    }\n\n    const comps = topic.split(\"|\").map(topic => {\n      return topic === \"null\" ? null : topic;\n    });\n    return comps.length === 1 ? comps[0] : comps;\n  });\n}\n\nfunction getEventTag(eventName) {\n  if (typeof eventName === \"string\") {\n    eventName = eventName.toLowerCase();\n\n    if (hexDataLength(eventName) === 32) {\n      return \"tx:\" + eventName;\n    }\n\n    if (eventName.indexOf(\":\") === -1) {\n      return eventName;\n    }\n  } else if (Array.isArray(eventName)) {\n    return \"filter:*:\" + serializeTopics(eventName);\n  } else if (ForkEvent.isForkEvent(eventName)) {\n    logger.warn(\"not implemented\");\n    throw new Error(\"not implemented\");\n  } else if (eventName && typeof eventName === \"object\") {\n    return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n  }\n\n  throw new Error(\"invalid event - \" + eventName);\n} //////////////////////////////\n// Helper Object\n\n\nfunction getTime() {\n  return new Date().getTime();\n}\n\nfunction stall(duration) {\n  return new Promise(resolve => {\n    setTimeout(resolve, duration);\n  });\n} //////////////////////////////\n// Provider Object\n\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\n\n\nconst PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\nexport class Event {\n  constructor(tag, listener, once) {\n    defineReadOnly(this, \"tag\", tag);\n    defineReadOnly(this, \"listener\", listener);\n    defineReadOnly(this, \"once\", once);\n  }\n\n  get event() {\n    switch (this.type) {\n      case \"tx\":\n        return this.hash;\n\n      case \"filter\":\n        return this.filter;\n    }\n\n    return this.tag;\n  }\n\n  get type() {\n    return this.tag.split(\":\")[0];\n  }\n\n  get hash() {\n    const comps = this.tag.split(\":\");\n\n    if (comps[0] !== \"tx\") {\n      return null;\n    }\n\n    return comps[1];\n  }\n\n  get filter() {\n    const comps = this.tag.split(\":\");\n\n    if (comps[0] !== \"filter\") {\n      return null;\n    }\n\n    const address = comps[1];\n    const topics = deserializeTopics(comps[2]);\n    const filter = {};\n\n    if (topics.length > 0) {\n      filter.topics = topics;\n    }\n\n    if (address && address !== \"*\") {\n      filter.address = address;\n    }\n\n    return filter;\n  }\n\n  pollable() {\n    return this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0;\n  }\n\n}\n; // https://github.com/satoshilabs/slips/blob/master/slip-0044.md\n\nconst coinInfos = {\n  \"0\": {\n    symbol: \"btc\",\n    p2pkh: 0x00,\n    p2sh: 0x05,\n    prefix: \"bc\"\n  },\n  \"2\": {\n    symbol: \"ltc\",\n    p2pkh: 0x30,\n    p2sh: 0x32,\n    prefix: \"ltc\"\n  },\n  \"3\": {\n    symbol: \"doge\",\n    p2pkh: 0x1e,\n    p2sh: 0x16\n  },\n  \"60\": {\n    symbol: \"eth\",\n    ilk: \"eth\"\n  },\n  \"61\": {\n    symbol: \"etc\",\n    ilk: \"eth\"\n  },\n  \"700\": {\n    symbol: \"xdai\",\n    ilk: \"eth\"\n  }\n};\n\nfunction bytes32ify(value) {\n  return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n} // Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\n\n\nfunction base58Encode(data) {\n  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\n\nconst matchers = [new RegExp(\"^(https):/\\/(.*)$\", \"i\"), new RegExp(\"^(data):(.*)$\", \"i\"), new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\"), new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\")];\n\nfunction _parseString(result) {\n  try {\n    return toUtf8String(_parseBytes(result));\n  } catch (error) {}\n\n  return null;\n}\n\nfunction _parseBytes(result) {\n  if (result === \"0x\") {\n    return null;\n  }\n\n  const offset = BigNumber.from(hexDataSlice(result, 0, 32)).toNumber();\n  const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n  return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n\nexport class Resolver {\n  // The resolvedAddress is only for creating a ReverseLookup resolver\n  constructor(provider, address, name, resolvedAddress) {\n    defineReadOnly(this, \"provider\", provider);\n    defineReadOnly(this, \"name\", name);\n    defineReadOnly(this, \"address\", provider.formatter.address(address));\n    defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n  }\n\n  _fetchBytes(selector, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // e.g. keccak256(\"addr(bytes32,uint256)\")\n      const tx = {\n        to: this.address,\n        data: hexConcat([selector, namehash(this.name), parameters || \"0x\"])\n      };\n\n      try {\n        return _parseBytes(yield this.provider.call(tx));\n      } catch (error) {\n        if (error.code === Logger.errors.CALL_EXCEPTION) {\n          return null;\n        }\n\n        return null;\n      }\n    });\n  }\n\n  _getAddress(coinType, hexBytes) {\n    const coinInfo = coinInfos[String(coinType)];\n\n    if (coinInfo == null) {\n      logger.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: `getAddress(${coinType})`\n      });\n    }\n\n    if (coinInfo.ilk === \"eth\") {\n      return this.provider.formatter.address(hexBytes);\n    }\n\n    const bytes = arrayify(hexBytes); // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n\n    if (coinInfo.p2pkh != null) {\n      const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n\n      if (p2pkh) {\n        const length = parseInt(p2pkh[1], 16);\n\n        if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n          return base58Encode(concat([[coinInfo.p2pkh], \"0x\" + p2pkh[2]]));\n        }\n      }\n    } // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n\n\n    if (coinInfo.p2sh != null) {\n      const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n\n      if (p2sh) {\n        const length = parseInt(p2sh[1], 16);\n\n        if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n          return base58Encode(concat([[coinInfo.p2sh], \"0x\" + p2sh[2]]));\n        }\n      }\n    } // Bech32\n\n\n    if (coinInfo.prefix != null) {\n      const length = bytes[1]; // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n\n      let version = bytes[0];\n\n      if (version === 0x00) {\n        if (length !== 20 && length !== 32) {\n          version = -1;\n        }\n      } else {\n        version = -1;\n      }\n\n      if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n        const words = bech32.toWords(bytes.slice(2));\n        words.unshift(version);\n        return bech32.encode(coinInfo.prefix, words);\n      }\n    }\n\n    return null;\n  }\n\n  getAddress(coinType) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (coinType == null) {\n        coinType = 60;\n      } // If Ethereum, use the standard `addr(bytes32)`\n\n\n      if (coinType === 60) {\n        try {\n          // keccak256(\"addr(bytes32)\")\n          const transaction = {\n            to: this.address,\n            data: \"0x3b3b57de\" + namehash(this.name).substring(2)\n          };\n          const hexBytes = yield this.provider.call(transaction); // No address\n\n          if (hexBytes === \"0x\" || hexBytes === HashZero) {\n            return null;\n          }\n\n          return this.provider.formatter.callAddress(hexBytes);\n        } catch (error) {\n          if (error.code === Logger.errors.CALL_EXCEPTION) {\n            return null;\n          }\n\n          throw error;\n        }\n      } // keccak256(\"addr(bytes32,uint256\")\n\n\n      const hexBytes = yield this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType)); // No address\n\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      } // Compute the address\n\n\n      const address = this._getAddress(coinType, hexBytes);\n\n      if (address == null) {\n        logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: `getAddress(${coinType})`,\n          coinType: coinType,\n          data: hexBytes\n        });\n      }\n\n      return address;\n    });\n  }\n\n  getAvatar() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const linkage = [];\n\n      try {\n        const avatar = yield this.getText(\"avatar\");\n\n        if (avatar == null) {\n          return null;\n        }\n\n        for (let i = 0; i < matchers.length; i++) {\n          const match = avatar.match(matchers[i]);\n\n          if (match == null) {\n            continue;\n          }\n\n          switch (match[1]) {\n            case \"https\":\n              linkage.push({\n                type: \"url\",\n                content: avatar\n              });\n              return {\n                linkage,\n                url: avatar\n              };\n\n            case \"data\":\n              linkage.push({\n                type: \"data\",\n                content: avatar\n              });\n              return {\n                linkage,\n                url: avatar\n              };\n\n            case \"ipfs\":\n              linkage.push({\n                type: \"ipfs\",\n                content: avatar\n              });\n              return {\n                linkage,\n                url: `https:/\\/gateway.ipfs.io/ipfs/${avatar.substring(7)}`\n              };\n\n            case \"erc721\":\n            case \"erc1155\":\n              {\n                // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                const selector = match[1] === \"erc721\" ? \"0xc87b56dd\" : \"0x0e89341c\";\n                linkage.push({\n                  type: match[1],\n                  content: avatar\n                }); // The owner of this name\n\n                const owner = this._resolvedAddress || (yield this.getAddress());\n                const comps = (match[2] || \"\").split(\"/\");\n\n                if (comps.length !== 2) {\n                  return null;\n                }\n\n                const addr = yield this.provider.formatter.address(comps[0]);\n                const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32); // Check that this account owns the token\n\n                if (match[1] === \"erc721\") {\n                  // ownerOf(uint256 tokenId)\n                  const tokenOwner = this.provider.formatter.callAddress(yield this.provider.call({\n                    to: addr,\n                    data: hexConcat([\"0x6352211e\", tokenId])\n                  }));\n\n                  if (owner !== tokenOwner) {\n                    return null;\n                  }\n\n                  linkage.push({\n                    type: \"owner\",\n                    content: tokenOwner\n                  });\n                } else if (match[1] === \"erc1155\") {\n                  // balanceOf(address owner, uint256 tokenId)\n                  const balance = BigNumber.from(yield this.provider.call({\n                    to: addr,\n                    data: hexConcat([\"0x00fdd58e\", hexZeroPad(owner, 32), tokenId])\n                  }));\n\n                  if (balance.isZero()) {\n                    return null;\n                  }\n\n                  linkage.push({\n                    type: \"balance\",\n                    content: balance.toString()\n                  });\n                } // Call the token contract for the metadata URL\n\n\n                const tx = {\n                  to: this.provider.formatter.address(comps[0]),\n                  data: hexConcat([selector, tokenId])\n                };\n\n                let metadataUrl = _parseString(yield this.provider.call(tx));\n\n                if (metadataUrl == null) {\n                  return null;\n                }\n\n                linkage.push({\n                  type: \"metadata-url\",\n                  content: metadataUrl\n                }); // ERC-1155 allows a generic {id} in the URL\n\n                if (match[1] === \"erc1155\") {\n                  metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                } // Get the token metadata\n\n\n                const metadata = yield fetchJson(metadataUrl); // Pull the image URL out\n\n                if (!metadata || typeof metadata.image !== \"string\" || !metadata.image.match(/^https:\\/\\//i)) {\n                  return null;\n                }\n\n                linkage.push({\n                  type: \"metadata\",\n                  content: JSON.stringify(metadata)\n                });\n                linkage.push({\n                  type: \"url\",\n                  content: metadata.image\n                });\n                return {\n                  linkage,\n                  url: metadata.image\n                };\n              }\n          }\n        }\n      } catch (error) {}\n\n      return null;\n    });\n  }\n\n  getContentHash() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // keccak256(\"contenthash()\")\n      const hexBytes = yield this._fetchBytes(\"0xbc1c58d1\"); // No contenthash\n\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      } // IPFS (CID: 1, Type: DAG-PB)\n\n\n      const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n\n      if (ipfs) {\n        const length = parseInt(ipfs[3], 16);\n\n        if (ipfs[4].length === length * 2) {\n          return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n        }\n      } // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n\n\n      const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n\n      if (swarm) {\n        if (swarm[1].length === 32 * 2) {\n          return \"bzz:/\\/\" + swarm[1];\n        }\n      }\n\n      return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"getContentHash()\",\n        data: hexBytes\n      });\n    });\n  }\n\n  getText(key) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // The key encoded as parameter to fetchBytes\n      let keyBytes = toUtf8Bytes(key); // The nodehash consumes the first slot, so the string pointer targets\n      // offset 64, with the length at offset 64 and data starting at offset 96\n\n      keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]); // Pad to word-size (32 bytes)\n\n      if (keyBytes.length % 32 !== 0) {\n        keyBytes = concat([keyBytes, hexZeroPad(\"0x\", 32 - key.length % 32)]);\n      }\n\n      const hexBytes = yield this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      }\n\n      return toUtf8String(hexBytes);\n    });\n  }\n\n}\nlet defaultFormatter = null;\nlet nextPollId = 1;\nexport class BaseProvider extends Provider {\n  /**\n   *  ready\n   *\n   *  A Promise<Network> that resolves only once the provider is ready.\n   *\n   *  Sub-classes that call the super with a network without a chainId\n   *  MUST set this. Standard named networks have a known chainId.\n   *\n   */\n  constructor(network) {\n    logger.checkNew(new.target, Provider);\n    super(); // Events being listened to\n\n    this._events = [];\n    this._emitted = {\n      block: -2\n    };\n    this.formatter = new.target.getFormatter(); // If network is any, this Provider allows the underlying\n    // network to change dynamically, and we auto-detect the\n    // current network\n\n    defineReadOnly(this, \"anyNetwork\", network === \"any\");\n\n    if (this.anyNetwork) {\n      network = this.detectNetwork();\n    }\n\n    if (network instanceof Promise) {\n      this._networkPromise = network; // Squash any \"unhandled promise\" errors; that do not need to be handled\n\n      network.catch(error => {}); // Trigger initial network setting (async)\n\n      this._ready().catch(error => {});\n    } else {\n      const knownNetwork = getStatic(new.target, \"getNetwork\")(network);\n\n      if (knownNetwork) {\n        defineReadOnly(this, \"_network\", knownNetwork);\n        this.emit(\"network\", knownNetwork, null);\n      } else {\n        logger.throwArgumentError(\"invalid network\", \"network\", network);\n      }\n    }\n\n    this._maxInternalBlockNumber = -1024;\n    this._lastBlockNumber = -2;\n    this._pollingInterval = 4000;\n    this._fastQueryDate = 0;\n  }\n\n  _ready() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._network == null) {\n        let network = null;\n\n        if (this._networkPromise) {\n          try {\n            network = yield this._networkPromise;\n          } catch (error) {}\n        } // Try the Provider's network detection (this MUST throw if it cannot)\n\n\n        if (network == null) {\n          network = yield this.detectNetwork();\n        } // This should never happen; every Provider sub-class should have\n        // suggested a network by here (or have thrown).\n\n\n        if (!network) {\n          logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n        } // Possible this call stacked so do not call defineReadOnly again\n\n\n        if (this._network == null) {\n          if (this.anyNetwork) {\n            this._network = network;\n          } else {\n            defineReadOnly(this, \"_network\", network);\n          }\n\n          this.emit(\"network\", network, null);\n        }\n      }\n\n      return this._network;\n    });\n  } // This will always return the most recently established network.\n  // For \"any\", this can change (a \"network\" event is emitted before\n  // any change is reflected); otherwise this cannot change\n\n\n  get ready() {\n    return poll(() => {\n      return this._ready().then(network => {\n        return network;\n      }, error => {\n        // If the network isn't running yet, we will wait\n        if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n          return undefined;\n        }\n\n        throw error;\n      });\n    });\n  } // @TODO: Remove this and just create a singleton formatter\n\n\n  static getFormatter() {\n    if (defaultFormatter == null) {\n      defaultFormatter = new Formatter();\n    }\n\n    return defaultFormatter;\n  } // @TODO: Remove this and just use getNetwork\n\n\n  static getNetwork(network) {\n    return getNetwork(network == null ? \"homestead\" : network);\n  } // Fetches the blockNumber, but will reuse any result that is less\n  // than maxAge old or has been requested since the last request\n\n\n  _getInternalBlockNumber(maxAge) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._ready(); // Allowing stale data up to maxAge old\n\n      if (maxAge > 0) {\n        // While there are pending internal block requests...\n        while (this._internalBlockNumber) {\n          // ...\"remember\" which fetch we started with\n          const internalBlockNumber = this._internalBlockNumber;\n\n          try {\n            // Check the result is not too stale\n            const result = yield internalBlockNumber;\n\n            if (getTime() - result.respTime <= maxAge) {\n              return result.blockNumber;\n            } // Too old; fetch a new value\n\n\n            break;\n          } catch (error) {\n            // The fetch rejected; if we are the first to get the\n            // rejection, drop through so we replace it with a new\n            // fetch; all others blocked will then get that fetch\n            // which won't match the one they \"remembered\" and loop\n            if (this._internalBlockNumber === internalBlockNumber) {\n              break;\n            }\n          }\n        }\n      }\n\n      const reqTime = getTime();\n      const checkInternalBlockNumber = resolveProperties({\n        blockNumber: this.perform(\"getBlockNumber\", {}),\n        networkError: this.getNetwork().then(network => null, error => error)\n      }).then(_ref => {\n        let {\n          blockNumber,\n          networkError\n        } = _ref;\n\n        if (networkError) {\n          // Unremember this bad internal block number\n          if (this._internalBlockNumber === checkInternalBlockNumber) {\n            this._internalBlockNumber = null;\n          }\n\n          throw networkError;\n        }\n\n        const respTime = getTime();\n        blockNumber = BigNumber.from(blockNumber).toNumber();\n\n        if (blockNumber < this._maxInternalBlockNumber) {\n          blockNumber = this._maxInternalBlockNumber;\n        }\n\n        this._maxInternalBlockNumber = blockNumber;\n\n        this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n\n\n        return {\n          blockNumber,\n          reqTime,\n          respTime\n        };\n      });\n      this._internalBlockNumber = checkInternalBlockNumber; // Swallow unhandled exceptions; if needed they are handled else where\n\n      checkInternalBlockNumber.catch(error => {\n        // Don't null the dead (rejected) fetch, if it has already been updated\n        if (this._internalBlockNumber === checkInternalBlockNumber) {\n          this._internalBlockNumber = null;\n        }\n      });\n      return (yield checkInternalBlockNumber).blockNumber;\n    });\n  }\n\n  poll() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const pollId = nextPollId++; // Track all running promises, so we can trigger a post-poll once they are complete\n\n      const runners = [];\n      let blockNumber = null;\n\n      try {\n        blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n      } catch (error) {\n        this.emit(\"error\", error);\n        return;\n      }\n\n      this._setFastBlockNumber(blockNumber); // Emit a poll event after we have the latest (fast) block number\n\n\n      this.emit(\"poll\", pollId, blockNumber); // If the block has not changed, meh.\n\n      if (blockNumber === this._lastBlockNumber) {\n        this.emit(\"didPoll\", pollId);\n        return;\n      } // First polling cycle, trigger a \"block\" events\n\n\n      if (this._emitted.block === -2) {\n        this._emitted.block = blockNumber - 1;\n      }\n\n      if (Math.abs(this._emitted.block - blockNumber) > 1000) {\n        logger.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);\n        this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n          blockNumber: blockNumber,\n          event: \"blockSkew\",\n          previousBlockNumber: this._emitted.block\n        }));\n        this.emit(\"block\", blockNumber);\n      } else {\n        // Notify all listener for each block that has passed\n        for (let i = this._emitted.block + 1; i <= blockNumber; i++) {\n          this.emit(\"block\", i);\n        }\n      } // The emitted block was updated, check for obsolete events\n\n\n      if (this._emitted.block !== blockNumber) {\n        this._emitted.block = blockNumber;\n        Object.keys(this._emitted).forEach(key => {\n          // The block event does not expire\n          if (key === \"block\") {\n            return;\n          } // The block we were at when we emitted this event\n\n\n          const eventBlockNumber = this._emitted[key]; // We cannot garbage collect pending transactions or blocks here\n          // They should be garbage collected by the Provider when setting\n          // \"pending\" events\n\n          if (eventBlockNumber === \"pending\") {\n            return;\n          } // Evict any transaction hashes or block hashes over 12 blocks\n          // old, since they should not return null anyways\n\n\n          if (blockNumber - eventBlockNumber > 12) {\n            delete this._emitted[key];\n          }\n        });\n      } // First polling cycle\n\n\n      if (this._lastBlockNumber === -2) {\n        this._lastBlockNumber = blockNumber - 1;\n      } // Find all transaction hashes we are waiting on\n\n\n      this._events.forEach(event => {\n        switch (event.type) {\n          case \"tx\":\n            {\n              const hash = event.hash;\n              let runner = this.getTransactionReceipt(hash).then(receipt => {\n                if (!receipt || receipt.blockNumber == null) {\n                  return null;\n                }\n\n                this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                this.emit(hash, receipt);\n                return null;\n              }).catch(error => {\n                this.emit(\"error\", error);\n              });\n              runners.push(runner);\n              break;\n            }\n\n          case \"filter\":\n            {\n              const filter = event.filter;\n              filter.fromBlock = this._lastBlockNumber + 1;\n              filter.toBlock = blockNumber;\n              const runner = this.getLogs(filter).then(logs => {\n                if (logs.length === 0) {\n                  return;\n                }\n\n                logs.forEach(log => {\n                  this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                  this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                  this.emit(filter, log);\n                });\n              }).catch(error => {\n                this.emit(\"error\", error);\n              });\n              runners.push(runner);\n              break;\n            }\n        }\n      });\n\n      this._lastBlockNumber = blockNumber; // Once all events for this loop have been processed, emit \"didPoll\"\n\n      Promise.all(runners).then(() => {\n        this.emit(\"didPoll\", pollId);\n      }).catch(error => {\n        this.emit(\"error\", error);\n      });\n      return;\n    });\n  } // Deprecated; do not use this\n\n\n  resetEventsBlock(blockNumber) {\n    this._lastBlockNumber = blockNumber - 1;\n\n    if (this.polling) {\n      this.poll();\n    }\n  }\n\n  get network() {\n    return this._network;\n  } // This method should query the network if the underlying network\n  // can change, such as when connected to a JSON-RPC backend\n\n\n  detectNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"provider.detectNetwork\"\n      });\n    });\n  }\n\n  getNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const network = yield this._ready(); // Make sure we are still connected to the same network; this is\n      // only an external call for backends which can have the underlying\n      // network change spontaneously\n\n      const currentNetwork = yield this.detectNetwork();\n\n      if (network.chainId !== currentNetwork.chainId) {\n        // We are allowing network changes, things can get complex fast;\n        // make sure you know what you are doing if you use \"any\"\n        if (this.anyNetwork) {\n          this._network = currentNetwork; // Reset all internal block number guards and caches\n\n          this._lastBlockNumber = -2;\n          this._fastBlockNumber = null;\n          this._fastBlockNumberPromise = null;\n          this._fastQueryDate = 0;\n          this._emitted.block = -2;\n          this._maxInternalBlockNumber = -1024;\n          this._internalBlockNumber = null; // The \"network\" event MUST happen before this method resolves\n          // so any events have a chance to unregister, so we stall an\n          // additional event loop before returning from /this/ call\n\n          this.emit(\"network\", currentNetwork, network);\n          yield stall(0);\n          return this._network;\n        }\n\n        const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n          event: \"changed\",\n          network: network,\n          detectedNetwork: currentNetwork\n        });\n        this.emit(\"error\", error);\n        throw error;\n      }\n\n      return network;\n    });\n  }\n\n  get blockNumber() {\n    this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(blockNumber => {\n      this._setFastBlockNumber(blockNumber);\n    }, error => {});\n\n    return this._fastBlockNumber != null ? this._fastBlockNumber : -1;\n  }\n\n  get polling() {\n    return this._poller != null;\n  }\n\n  set polling(value) {\n    if (value && !this._poller) {\n      this._poller = setInterval(() => {\n        this.poll();\n      }, this.pollingInterval);\n\n      if (!this._bootstrapPoll) {\n        this._bootstrapPoll = setTimeout(() => {\n          this.poll(); // We block additional polls until the polling interval\n          // is done, to prevent overwhelming the poll function\n\n          this._bootstrapPoll = setTimeout(() => {\n            // If polling was disabled, something may require a poke\n            // since starting the bootstrap poll and it was disabled\n            if (!this._poller) {\n              this.poll();\n            } // Clear out the bootstrap so we can do another\n\n\n            this._bootstrapPoll = null;\n          }, this.pollingInterval);\n        }, 0);\n      }\n    } else if (!value && this._poller) {\n      clearInterval(this._poller);\n      this._poller = null;\n    }\n  }\n\n  get pollingInterval() {\n    return this._pollingInterval;\n  }\n\n  set pollingInterval(value) {\n    if (typeof value !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n      throw new Error(\"invalid polling interval\");\n    }\n\n    this._pollingInterval = value;\n\n    if (this._poller) {\n      clearInterval(this._poller);\n      this._poller = setInterval(() => {\n        this.poll();\n      }, this._pollingInterval);\n    }\n  }\n\n  _getFastBlockNumber() {\n    const now = getTime(); // Stale block number, request a newer value\n\n    if (now - this._fastQueryDate > 2 * this._pollingInterval) {\n      this._fastQueryDate = now;\n      this._fastBlockNumberPromise = this.getBlockNumber().then(blockNumber => {\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n          this._fastBlockNumber = blockNumber;\n        }\n\n        return this._fastBlockNumber;\n      });\n    }\n\n    return this._fastBlockNumberPromise;\n  }\n\n  _setFastBlockNumber(blockNumber) {\n    // Older block, maybe a stale request\n    if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n      return;\n    } // Update the time we updated the blocknumber\n\n\n    this._fastQueryDate = getTime(); // Newer block number, use  it\n\n    if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n      this._fastBlockNumber = blockNumber;\n      this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n    }\n  }\n\n  waitForTransaction(transactionHash, confirmations, timeout) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._waitForTransaction(transactionHash, confirmations == null ? 1 : confirmations, timeout || 0, null);\n    });\n  }\n\n  _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const receipt = yield this.getTransactionReceipt(transactionHash); // Receipt is already good\n\n      if ((receipt ? receipt.confirmations : 0) >= confirmations) {\n        return receipt;\n      } // Poll until the receipt is good...\n\n\n      return new Promise((resolve, reject) => {\n        const cancelFuncs = [];\n        let done = false;\n\n        const alreadyDone = function () {\n          if (done) {\n            return true;\n          }\n\n          done = true;\n          cancelFuncs.forEach(func => {\n            func();\n          });\n          return false;\n        };\n\n        const minedHandler = receipt => {\n          if (receipt.confirmations < confirmations) {\n            return;\n          }\n\n          if (alreadyDone()) {\n            return;\n          }\n\n          resolve(receipt);\n        };\n\n        this.on(transactionHash, minedHandler);\n        cancelFuncs.push(() => {\n          this.removeListener(transactionHash, minedHandler);\n        });\n\n        if (replaceable) {\n          let lastBlockNumber = replaceable.startBlock;\n          let scannedBlock = null;\n\n          const replaceHandler = blockNumber => __awaiter(this, void 0, void 0, function* () {\n            if (done) {\n              return;\n            } // Wait 1 second; this is only used in the case of a fault, so\n            // we will trade off a little bit of latency for more consistent\n            // results and fewer JSON-RPC calls\n\n\n            yield stall(1000);\n            this.getTransactionCount(replaceable.from).then(nonce => __awaiter(this, void 0, void 0, function* () {\n              if (done) {\n                return;\n              }\n\n              if (nonce <= replaceable.nonce) {\n                lastBlockNumber = blockNumber;\n              } else {\n                // First check if the transaction was mined\n                {\n                  const mined = yield this.getTransaction(transactionHash);\n\n                  if (mined && mined.blockNumber != null) {\n                    return;\n                  }\n                } // First time scanning. We start a little earlier for some\n                // wiggle room here to handle the eventually consistent nature\n                // of blockchain (e.g. the getTransactionCount was for a\n                // different block)\n\n                if (scannedBlock == null) {\n                  scannedBlock = lastBlockNumber - 3;\n\n                  if (scannedBlock < replaceable.startBlock) {\n                    scannedBlock = replaceable.startBlock;\n                  }\n                }\n\n                while (scannedBlock <= blockNumber) {\n                  if (done) {\n                    return;\n                  }\n\n                  const block = yield this.getBlockWithTransactions(scannedBlock);\n\n                  for (let ti = 0; ti < block.transactions.length; ti++) {\n                    const tx = block.transactions[ti]; // Successfully mined!\n\n                    if (tx.hash === transactionHash) {\n                      return;\n                    } // Matches our transaction from and nonce; its a replacement\n\n\n                    if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                      if (done) {\n                        return;\n                      } // Get the receipt of the replacement\n\n\n                      const receipt = yield this.waitForTransaction(tx.hash, confirmations); // Already resolved or rejected (prolly a timeout)\n\n                      if (alreadyDone()) {\n                        return;\n                      } // The reason we were replaced\n\n\n                      let reason = \"replaced\";\n\n                      if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                        reason = \"repriced\";\n                      } else if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                        reason = \"cancelled\";\n                      } // Explain why we were replaced\n\n\n                      reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                        cancelled: reason === \"replaced\" || reason === \"cancelled\",\n                        reason,\n                        replacement: this._wrapTransaction(tx),\n                        hash: transactionHash,\n                        receipt\n                      }));\n                      return;\n                    }\n                  }\n\n                  scannedBlock++;\n                }\n              }\n\n              if (done) {\n                return;\n              }\n\n              this.once(\"block\", replaceHandler);\n            }), error => {\n              if (done) {\n                return;\n              }\n\n              this.once(\"block\", replaceHandler);\n            });\n          });\n\n          if (done) {\n            return;\n          }\n\n          this.once(\"block\", replaceHandler);\n          cancelFuncs.push(() => {\n            this.removeListener(\"block\", replaceHandler);\n          });\n        }\n\n        if (typeof timeout === \"number\" && timeout > 0) {\n          const timer = setTimeout(() => {\n            if (alreadyDone()) {\n              return;\n            }\n\n            reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, {\n              timeout: timeout\n            }));\n          }, timeout);\n\n          if (timer.unref) {\n            timer.unref();\n          }\n\n          cancelFuncs.push(() => {\n            clearTimeout(timer);\n          });\n        }\n      });\n    });\n  }\n\n  getBlockNumber() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._getInternalBlockNumber(0);\n    });\n  }\n\n  getGasPrice() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const result = yield this.perform(\"getGasPrice\", {});\n\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getGasPrice\",\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getBalance(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getBalance\", params);\n\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getBalance\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getTransactionCount(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getTransactionCount\", params);\n\n      try {\n        return BigNumber.from(result).toNumber();\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getTransactionCount\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getCode(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getCode\", params);\n\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getCode\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getStorageAt(addressOrName, position, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag),\n        position: Promise.resolve(position).then(p => hexValue(p))\n      });\n      const result = yield this.perform(\"getStorageAt\", params);\n\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getStorageAt\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  } // This should be called by any subclass wrapping a TransactionResponse\n\n\n  _wrapTransaction(tx, hash, startBlock) {\n    if (hash != null && hexDataLength(hash) !== 32) {\n      throw new Error(\"invalid response - sendTransaction\");\n    }\n\n    const result = tx; // Check the hash we expect is the same as the hash the server reported\n\n    if (hash != null && tx.hash !== hash) {\n      logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, {\n        expectedHash: tx.hash,\n        returnedHash: hash\n      });\n    }\n\n    result.wait = (confirms, timeout) => __awaiter(this, void 0, void 0, function* () {\n      if (confirms == null) {\n        confirms = 1;\n      }\n\n      if (timeout == null) {\n        timeout = 0;\n      } // Get the details to detect replacement\n\n\n      let replacement = undefined;\n\n      if (confirms !== 0 && startBlock != null) {\n        replacement = {\n          data: tx.data,\n          from: tx.from,\n          nonce: tx.nonce,\n          to: tx.to,\n          value: tx.value,\n          startBlock\n        };\n      }\n\n      const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n\n      if (receipt == null && confirms === 0) {\n        return null;\n      } // No longer pending, allow the polling loop to garbage collect this\n\n\n      this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n      if (receipt.status === 0) {\n        logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n          transactionHash: tx.hash,\n          transaction: tx,\n          receipt: receipt\n        });\n      }\n\n      return receipt;\n    });\n\n    return result;\n  }\n\n  sendTransaction(signedTransaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const hexTx = yield Promise.resolve(signedTransaction).then(t => hexlify(t));\n      const tx = this.formatter.transaction(signedTransaction);\n\n      if (tx.confirmations == null) {\n        tx.confirmations = 0;\n      }\n\n      const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n      try {\n        const hash = yield this.perform(\"sendTransaction\", {\n          signedTransaction: hexTx\n        });\n        return this._wrapTransaction(tx, hash, blockNumber);\n      } catch (error) {\n        error.transaction = tx;\n        error.transactionHash = tx.hash;\n        throw error;\n      }\n    });\n  }\n\n  _getTransactionRequest(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const values = yield transaction;\n      const tx = {};\n      [\"from\", \"to\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v ? this._getAddress(v) : null);\n      });\n      [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v ? BigNumber.from(v) : null);\n      });\n      [\"type\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v != null ? v : null);\n      });\n\n      if (values.accessList) {\n        tx.accessList = this.formatter.accessList(values.accessList);\n      }\n\n      [\"data\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v ? hexlify(v) : null);\n      });\n      return this.formatter.transactionRequest(yield resolveProperties(tx));\n    });\n  }\n\n  _getFilter(filter) {\n    return __awaiter(this, void 0, void 0, function* () {\n      filter = yield filter;\n      const result = {};\n\n      if (filter.address != null) {\n        result.address = this._getAddress(filter.address);\n      }\n\n      [\"blockHash\", \"topics\"].forEach(key => {\n        if (filter[key] == null) {\n          return;\n        }\n\n        result[key] = filter[key];\n      });\n      [\"fromBlock\", \"toBlock\"].forEach(key => {\n        if (filter[key] == null) {\n          return;\n        }\n\n        result[key] = this._getBlockTag(filter[key]);\n      });\n      return this.formatter.filter(yield resolveProperties(result));\n    });\n  }\n\n  call(transaction, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        transaction: this._getTransactionRequest(transaction),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"call\", params);\n\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"call\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  estimateGas(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        transaction: this._getTransactionRequest(transaction)\n      });\n      const result = yield this.perform(\"estimateGas\", params);\n\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"estimateGas\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  _getAddress(addressOrName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      addressOrName = yield addressOrName;\n\n      if (typeof addressOrName !== \"string\") {\n        logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n      }\n\n      const address = yield this.resolveName(addressOrName);\n\n      if (address == null) {\n        logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: `resolveName(${JSON.stringify(addressOrName)})`\n        });\n      }\n\n      return address;\n    });\n  }\n\n  _getBlock(blockHashOrBlockTag, includeTransactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      blockHashOrBlockTag = yield blockHashOrBlockTag; // If blockTag is a number (not \"latest\", etc), this is the block number\n\n      let blockNumber = -128;\n      const params = {\n        includeTransactions: !!includeTransactions\n      };\n\n      if (isHexString(blockHashOrBlockTag, 32)) {\n        params.blockHash = blockHashOrBlockTag;\n      } else {\n        try {\n          params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);\n\n          if (isHexString(params.blockTag)) {\n            blockNumber = parseInt(params.blockTag.substring(2), 16);\n          }\n        } catch (error) {\n          logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n        }\n      }\n\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const block = yield this.perform(\"getBlock\", params); // Block was not found\n\n        if (block == null) {\n          // For blockhashes, if we didn't say it existed, that blockhash may\n          // not exist. If we did see it though, perhaps from a log, we know\n          // it exists, and this node is just not caught up yet.\n          if (params.blockHash != null) {\n            if (this._emitted[\"b:\" + params.blockHash] == null) {\n              return null;\n            }\n          } // For block tags, if we are asking for a future block, we return null\n\n\n          if (params.blockTag != null) {\n            if (blockNumber > this._emitted.block) {\n              return null;\n            }\n          } // Retry on the next block\n\n\n          return undefined;\n        } // Add transactions\n\n\n        if (includeTransactions) {\n          let blockNumber = null;\n\n          for (let i = 0; i < block.transactions.length; i++) {\n            const tx = block.transactions[i];\n\n            if (tx.blockNumber == null) {\n              tx.confirmations = 0;\n            } else if (tx.confirmations == null) {\n              if (blockNumber == null) {\n                blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n              } // Add the confirmations using the fast block number (pessimistic)\n\n\n              let confirmations = blockNumber - tx.blockNumber + 1;\n\n              if (confirmations <= 0) {\n                confirmations = 1;\n              }\n\n              tx.confirmations = confirmations;\n            }\n          }\n\n          const blockWithTxs = this.formatter.blockWithTransactions(block);\n          blockWithTxs.transactions = blockWithTxs.transactions.map(tx => this._wrapTransaction(tx));\n          return blockWithTxs;\n        }\n\n        return this.formatter.block(block);\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n\n  getBlock(blockHashOrBlockTag) {\n    return this._getBlock(blockHashOrBlockTag, false);\n  }\n\n  getBlockWithTransactions(blockHashOrBlockTag) {\n    return this._getBlock(blockHashOrBlockTag, true);\n  }\n\n  getTransaction(transactionHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      transactionHash = yield transactionHash;\n      const params = {\n        transactionHash: this.formatter.hash(transactionHash, true)\n      };\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const result = yield this.perform(\"getTransaction\", params);\n\n        if (result == null) {\n          if (this._emitted[\"t:\" + transactionHash] == null) {\n            return null;\n          }\n\n          return undefined;\n        }\n\n        const tx = this.formatter.transactionResponse(result);\n\n        if (tx.blockNumber == null) {\n          tx.confirmations = 0;\n        } else if (tx.confirmations == null) {\n          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval); // Add the confirmations using the fast block number (pessimistic)\n\n          let confirmations = blockNumber - tx.blockNumber + 1;\n\n          if (confirmations <= 0) {\n            confirmations = 1;\n          }\n\n          tx.confirmations = confirmations;\n        }\n\n        return this._wrapTransaction(tx);\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n\n  getTransactionReceipt(transactionHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      transactionHash = yield transactionHash;\n      const params = {\n        transactionHash: this.formatter.hash(transactionHash, true)\n      };\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const result = yield this.perform(\"getTransactionReceipt\", params);\n\n        if (result == null) {\n          if (this._emitted[\"t:\" + transactionHash] == null) {\n            return null;\n          }\n\n          return undefined;\n        } // \"geth-etc\" returns receipts before they are ready\n\n\n        if (result.blockHash == null) {\n          return undefined;\n        }\n\n        const receipt = this.formatter.receipt(result);\n\n        if (receipt.blockNumber == null) {\n          receipt.confirmations = 0;\n        } else if (receipt.confirmations == null) {\n          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval); // Add the confirmations using the fast block number (pessimistic)\n\n          let confirmations = blockNumber - receipt.blockNumber + 1;\n\n          if (confirmations <= 0) {\n            confirmations = 1;\n          }\n\n          receipt.confirmations = confirmations;\n        }\n\n        return receipt;\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n\n  getLogs(filter) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        filter: this._getFilter(filter)\n      });\n      const logs = yield this.perform(\"getLogs\", params);\n      logs.forEach(log => {\n        if (log.removed == null) {\n          log.removed = false;\n        }\n      });\n      return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    });\n  }\n\n  getEtherPrice() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      return this.perform(\"getEtherPrice\", {});\n    });\n  }\n\n  _getBlockTag(blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      blockTag = yield blockTag;\n\n      if (typeof blockTag === \"number\" && blockTag < 0) {\n        if (blockTag % 1) {\n          logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n        }\n\n        let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n        blockNumber += blockTag;\n\n        if (blockNumber < 0) {\n          blockNumber = 0;\n        }\n\n        return this.formatter.blockTag(blockNumber);\n      }\n\n      return this.formatter.blockTag(blockTag);\n    });\n  }\n\n  getResolver(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const address = yield this._getResolver(name);\n\n        if (address == null) {\n          return null;\n        }\n\n        return new Resolver(this, address, name);\n      } catch (error) {\n        if (error.code === Logger.errors.CALL_EXCEPTION) {\n          return null;\n        }\n\n        return null;\n      }\n    });\n  }\n\n  _getResolver(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Get the resolver from the blockchain\n      const network = yield this.getNetwork(); // No ENS...\n\n      if (!network.ensAddress) {\n        logger.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"ENS\",\n          network: network.name\n        });\n      } // keccak256(\"resolver(bytes32)\")\n\n\n      const transaction = {\n        to: network.ensAddress,\n        data: \"0x0178b8bf\" + namehash(name).substring(2)\n      };\n\n      try {\n        return this.formatter.callAddress(yield this.call(transaction));\n      } catch (error) {\n        if (error.code === Logger.errors.CALL_EXCEPTION) {\n          return null;\n        }\n\n        throw error;\n      }\n    });\n  }\n\n  resolveName(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      name = yield name; // If it is already an address, nothing to resolve\n\n      try {\n        return Promise.resolve(this.formatter.address(name));\n      } catch (error) {\n        // If is is a hexstring, the address is bad (See #694)\n        if (isHexString(name)) {\n          throw error;\n        }\n      }\n\n      if (typeof name !== \"string\") {\n        logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n      } // Get the addr from the resovler\n\n\n      const resolver = yield this.getResolver(name);\n\n      if (!resolver) {\n        return null;\n      }\n\n      return yield resolver.getAddress();\n    });\n  }\n\n  lookupAddress(address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      address = yield address;\n      address = this.formatter.address(address);\n      const reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n      const resolverAddress = yield this._getResolver(reverseName);\n\n      if (!resolverAddress) {\n        return null;\n      } // keccak(\"name(bytes32)\")\n\n\n      let bytes = arrayify(yield this.call({\n        to: resolverAddress,\n        data: \"0x691f3431\" + namehash(reverseName).substring(2)\n      })); // Strip off the dynamic string pointer (0x20)\n\n      if (bytes.length < 32 || !BigNumber.from(bytes.slice(0, 32)).eq(32)) {\n        return null;\n      }\n\n      bytes = bytes.slice(32); // Not a length-prefixed string\n\n      if (bytes.length < 32) {\n        return null;\n      } // Get the length of the string (from the length-prefix)\n\n\n      const length = BigNumber.from(bytes.slice(0, 32)).toNumber();\n      bytes = bytes.slice(32); // Length longer than available data\n\n      if (length > bytes.length) {\n        return null;\n      }\n\n      const name = toUtf8String(bytes.slice(0, length)); // Make sure the reverse record matches the foward record\n\n      const addr = yield this.resolveName(name);\n\n      if (addr != address) {\n        return null;\n      }\n\n      return name;\n    });\n  }\n\n  getAvatar(nameOrAddress) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let resolver = null;\n\n      if (isHexString(nameOrAddress)) {\n        // Address; reverse lookup\n        const address = this.formatter.address(nameOrAddress);\n        const reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n        const resolverAddress = yield this._getResolver(reverseName);\n\n        if (!resolverAddress) {\n          return null;\n        }\n\n        resolver = new Resolver(this, resolverAddress, \"_\", address);\n      } else {\n        // ENS name; forward lookup\n        resolver = yield this.getResolver(nameOrAddress);\n      }\n\n      const avatar = yield resolver.getAvatar();\n\n      if (avatar == null) {\n        return null;\n      }\n\n      return avatar.url;\n    });\n  }\n\n  perform(method, params) {\n    return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n      operation: method\n    });\n  }\n\n  _startEvent(event) {\n    this.polling = this._events.filter(e => e.pollable()).length > 0;\n  }\n\n  _stopEvent(event) {\n    this.polling = this._events.filter(e => e.pollable()).length > 0;\n  }\n\n  _addEventListener(eventName, listener, once) {\n    const event = new Event(getEventTag(eventName), listener, once);\n\n    this._events.push(event);\n\n    this._startEvent(event);\n\n    return this;\n  }\n\n  on(eventName, listener) {\n    return this._addEventListener(eventName, listener, false);\n  }\n\n  once(eventName, listener) {\n    return this._addEventListener(eventName, listener, true);\n  }\n\n  emit(eventName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    let result = false;\n    let stopped = [];\n    let eventTag = getEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag) {\n        return true;\n      }\n\n      setTimeout(() => {\n        event.listener.apply(this, args);\n      }, 0);\n      result = true;\n\n      if (event.once) {\n        stopped.push(event);\n        return false;\n      }\n\n      return true;\n    });\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return result;\n  }\n\n  listenerCount(eventName) {\n    if (!eventName) {\n      return this._events.length;\n    }\n\n    let eventTag = getEventTag(eventName);\n    return this._events.filter(event => {\n      return event.tag === eventTag;\n    }).length;\n  }\n\n  listeners(eventName) {\n    if (eventName == null) {\n      return this._events.map(event => event.listener);\n    }\n\n    let eventTag = getEventTag(eventName);\n    return this._events.filter(event => event.tag === eventTag).map(event => event.listener);\n  }\n\n  off(eventName, listener) {\n    if (listener == null) {\n      return this.removeAllListeners(eventName);\n    }\n\n    const stopped = [];\n    let found = false;\n    let eventTag = getEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag || event.listener != listener) {\n        return true;\n      }\n\n      if (found) {\n        return true;\n      }\n\n      found = true;\n      stopped.push(event);\n      return false;\n    });\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return this;\n  }\n\n  removeAllListeners(eventName) {\n    let stopped = [];\n\n    if (eventName == null) {\n      stopped = this._events;\n      this._events = [];\n    } else {\n      const eventTag = getEventTag(eventName);\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n\n        stopped.push(event);\n        return false;\n      });\n    }\n\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["ForkEvent","Provider","Base58","BigNumber","arrayify","concat","hexConcat","hexDataLength","hexDataSlice","hexlify","hexValue","hexZeroPad","isHexString","HashZero","namehash","getNetwork","defineReadOnly","getStatic","resolveProperties","sha256","toUtf8Bytes","toUtf8String","fetchJson","poll","bech32","Logger","version","logger","Formatter","checkTopic","topic","throwArgumentError","toLowerCase","serializeTopics","topics","slice","length","pop","map","Array","isArray","unique","forEach","sorted","Object","keys","sort","join","deserializeTopics","data","split","comps","getEventTag","eventName","indexOf","isForkEvent","warn","Error","address","getTime","Date","stall","duration","Promise","resolve","setTimeout","PollableEvents","Event","constructor","tag","listener","once","event","type","hash","filter","pollable","coinInfos","symbol","p2pkh","p2sh","prefix","ilk","bytes32ify","value","from","toHexString","base58Encode","encode","matchers","RegExp","_parseString","result","_parseBytes","error","offset","toNumber","Resolver","provider","name","resolvedAddress","formatter","_fetchBytes","selector","parameters","tx","to","call","code","errors","CALL_EXCEPTION","_getAddress","coinType","hexBytes","coinInfo","String","throwError","UNSUPPORTED_OPERATION","operation","bytes","match","parseInt","words","toWords","unshift","getAddress","transaction","substring","callAddress","getAvatar","linkage","avatar","getText","i","push","content","url","owner","_resolvedAddress","addr","tokenId","tokenOwner","balance","isZero","toString","metadataUrl","replace","metadata","image","JSON","stringify","getContentHash","ipfs","swarm","key","keyBytes","defaultFormatter","nextPollId","BaseProvider","network","checkNew","new","target","_events","_emitted","block","getFormatter","anyNetwork","detectNetwork","_networkPromise","catch","_ready","knownNetwork","emit","_maxInternalBlockNumber","_lastBlockNumber","_pollingInterval","_fastQueryDate","_network","UNKNOWN_ERROR","ready","then","NETWORK_ERROR","undefined","_getInternalBlockNumber","maxAge","_internalBlockNumber","internalBlockNumber","respTime","blockNumber","reqTime","checkInternalBlockNumber","perform","networkError","_setFastBlockNumber","pollId","runners","pollingInterval","Math","abs","makeError","previousBlockNumber","eventBlockNumber","runner","getTransactionReceipt","receipt","fromBlock","toBlock","getLogs","logs","log","blockHash","transactionHash","all","resetEventsBlock","polling","currentNetwork","chainId","_fastBlockNumber","_fastBlockNumberPromise","detectedNetwork","_poller","setInterval","_bootstrapPoll","clearInterval","_getFastBlockNumber","now","getBlockNumber","waitForTransaction","confirmations","timeout","_waitForTransaction","replaceable","reject","cancelFuncs","done","alreadyDone","func","minedHandler","on","removeListener","lastBlockNumber","startBlock","scannedBlock","replaceHandler","__awaiter","getTransactionCount","nonce","mined","getTransaction","getBlockWithTransactions","ti","transactions","reason","eq","TRANSACTION_REPLACED","cancelled","replacement","_wrapTransaction","timer","TIMEOUT","unref","clearTimeout","getGasPrice","SERVER_ERROR","method","getBalance","addressOrName","blockTag","params","_getBlockTag","getCode","getStorageAt","position","p","expectedHash","returnedHash","wait","confirms","status","sendTransaction","signedTransaction","hexTx","t","_getTransactionRequest","values","v","accessList","transactionRequest","_getFilter","estimateGas","resolveName","_getBlock","blockHashOrBlockTag","includeTransactions","blockWithTxs","blockWithTransactions","oncePoll","getBlock","transactionResponse","removed","arrayOf","filterLog","bind","getEtherPrice","getResolver","_getResolver","ensAddress","resolver","lookupAddress","reverseName","resolverAddress","nameOrAddress","NOT_IMPLEMENTED","_startEvent","e","_stopEvent","_addEventListener","args","stopped","eventTag","apply","listenerCount","listeners","off","removeAllListeners","found"],"sourceRoot":"","sources":["../src.ts/base-provider.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}