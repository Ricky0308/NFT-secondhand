{"ast":null,"code":"\"use strict\";\n/**\n *  BigNumber\n *\n *  A wrapper around the BN.js object. We use the BN.js library\n *  because it is used by elliptic, so it is required regardless.\n *\n */\n\nimport _BN from \"bn.js\";\nvar BN = _BN.BN;\nimport { hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst _constructorGuard = {};\nconst MAX_SAFE = 0x1fffffffffffff;\nexport function isBigNumberish(value) {\n  return value != null && (BigNumber.isBigNumber(value) || typeof value === \"number\" && value % 1 === 0 || typeof value === \"string\" && !!value.match(/^-?[0-9]+$/) || isHexString(value) || typeof value === \"bigint\" || isBytes(value));\n} // Only warn about passing 10 into radix once\n\nlet _warnedToStringRadix = false;\nexport class BigNumber {\n  constructor(constructorGuard, hex) {\n    logger.checkNew(new.target, BigNumber);\n\n    if (constructorGuard !== _constructorGuard) {\n      logger.throwError(\"cannot call constructor directly; use BigNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"new (BigNumber)\"\n      });\n    }\n\n    this._hex = hex;\n    this._isBigNumber = true;\n    Object.freeze(this);\n  }\n\n  fromTwos(value) {\n    return toBigNumber(toBN(this).fromTwos(value));\n  }\n\n  toTwos(value) {\n    return toBigNumber(toBN(this).toTwos(value));\n  }\n\n  abs() {\n    if (this._hex[0] === \"-\") {\n      return BigNumber.from(this._hex.substring(1));\n    }\n\n    return this;\n  }\n\n  add(other) {\n    return toBigNumber(toBN(this).add(toBN(other)));\n  }\n\n  sub(other) {\n    return toBigNumber(toBN(this).sub(toBN(other)));\n  }\n\n  div(other) {\n    const o = BigNumber.from(other);\n\n    if (o.isZero()) {\n      throwFault(\"division by zero\", \"div\");\n    }\n\n    return toBigNumber(toBN(this).div(toBN(other)));\n  }\n\n  mul(other) {\n    return toBigNumber(toBN(this).mul(toBN(other)));\n  }\n\n  mod(other) {\n    const value = toBN(other);\n\n    if (value.isNeg()) {\n      throwFault(\"cannot modulo negative values\", \"mod\");\n    }\n\n    return toBigNumber(toBN(this).umod(value));\n  }\n\n  pow(other) {\n    const value = toBN(other);\n\n    if (value.isNeg()) {\n      throwFault(\"cannot raise to negative values\", \"pow\");\n    }\n\n    return toBigNumber(toBN(this).pow(value));\n  }\n\n  and(other) {\n    const value = toBN(other);\n\n    if (this.isNegative() || value.isNeg()) {\n      throwFault(\"cannot 'and' negative values\", \"and\");\n    }\n\n    return toBigNumber(toBN(this).and(value));\n  }\n\n  or(other) {\n    const value = toBN(other);\n\n    if (this.isNegative() || value.isNeg()) {\n      throwFault(\"cannot 'or' negative values\", \"or\");\n    }\n\n    return toBigNumber(toBN(this).or(value));\n  }\n\n  xor(other) {\n    const value = toBN(other);\n\n    if (this.isNegative() || value.isNeg()) {\n      throwFault(\"cannot 'xor' negative values\", \"xor\");\n    }\n\n    return toBigNumber(toBN(this).xor(value));\n  }\n\n  mask(value) {\n    if (this.isNegative() || value < 0) {\n      throwFault(\"cannot mask negative values\", \"mask\");\n    }\n\n    return toBigNumber(toBN(this).maskn(value));\n  }\n\n  shl(value) {\n    if (this.isNegative() || value < 0) {\n      throwFault(\"cannot shift negative values\", \"shl\");\n    }\n\n    return toBigNumber(toBN(this).shln(value));\n  }\n\n  shr(value) {\n    if (this.isNegative() || value < 0) {\n      throwFault(\"cannot shift negative values\", \"shr\");\n    }\n\n    return toBigNumber(toBN(this).shrn(value));\n  }\n\n  eq(other) {\n    return toBN(this).eq(toBN(other));\n  }\n\n  lt(other) {\n    return toBN(this).lt(toBN(other));\n  }\n\n  lte(other) {\n    return toBN(this).lte(toBN(other));\n  }\n\n  gt(other) {\n    return toBN(this).gt(toBN(other));\n  }\n\n  gte(other) {\n    return toBN(this).gte(toBN(other));\n  }\n\n  isNegative() {\n    return this._hex[0] === \"-\";\n  }\n\n  isZero() {\n    return toBN(this).isZero();\n  }\n\n  toNumber() {\n    try {\n      return toBN(this).toNumber();\n    } catch (error) {\n      throwFault(\"overflow\", \"toNumber\", this.toString());\n    }\n\n    return null;\n  }\n\n  toBigInt() {\n    try {\n      return BigInt(this.toString());\n    } catch (e) {}\n\n    return logger.throwError(\"this platform does not support BigInt\", Logger.errors.UNSUPPORTED_OPERATION, {\n      value: this.toString()\n    });\n  }\n\n  toString() {\n    // Lots of people expect this, which we do not support, so check (See: #889)\n    if (arguments.length > 0) {\n      if (arguments[0] === 10) {\n        if (!_warnedToStringRadix) {\n          _warnedToStringRadix = true;\n          logger.warn(\"BigNumber.toString does not accept any parameters; base-10 is assumed\");\n        }\n      } else if (arguments[0] === 16) {\n        logger.throwError(\"BigNumber.toString does not accept any parameters; use bigNumber.toHexString()\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n      } else {\n        logger.throwError(\"BigNumber.toString does not accept parameters\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n      }\n    }\n\n    return toBN(this).toString(10);\n  }\n\n  toHexString() {\n    return this._hex;\n  }\n\n  toJSON(key) {\n    return {\n      type: \"BigNumber\",\n      hex: this.toHexString()\n    };\n  }\n\n  static from(value) {\n    if (value instanceof BigNumber) {\n      return value;\n    }\n\n    if (typeof value === \"string\") {\n      if (value.match(/^-?0x[0-9a-f]+$/i)) {\n        return new BigNumber(_constructorGuard, toHex(value));\n      }\n\n      if (value.match(/^-?[0-9]+$/)) {\n        return new BigNumber(_constructorGuard, toHex(new BN(value)));\n      }\n\n      return logger.throwArgumentError(\"invalid BigNumber string\", \"value\", value);\n    }\n\n    if (typeof value === \"number\") {\n      if (value % 1) {\n        throwFault(\"underflow\", \"BigNumber.from\", value);\n      }\n\n      if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n        throwFault(\"overflow\", \"BigNumber.from\", value);\n      }\n\n      return BigNumber.from(String(value));\n    }\n\n    const anyValue = value;\n\n    if (typeof anyValue === \"bigint\") {\n      return BigNumber.from(anyValue.toString());\n    }\n\n    if (isBytes(anyValue)) {\n      return BigNumber.from(hexlify(anyValue));\n    }\n\n    if (anyValue) {\n      // Hexable interface (takes priority)\n      if (anyValue.toHexString) {\n        const hex = anyValue.toHexString();\n\n        if (typeof hex === \"string\") {\n          return BigNumber.from(hex);\n        }\n      } else {\n        // For now, handle legacy JSON-ified values (goes away in v6)\n        let hex = anyValue._hex; // New-form JSON\n\n        if (hex == null && anyValue.type === \"BigNumber\") {\n          hex = anyValue.hex;\n        }\n\n        if (typeof hex === \"string\") {\n          if (isHexString(hex) || hex[0] === \"-\" && isHexString(hex.substring(1))) {\n            return BigNumber.from(hex);\n          }\n        }\n      }\n    }\n\n    return logger.throwArgumentError(\"invalid BigNumber value\", \"value\", value);\n  }\n\n  static isBigNumber(value) {\n    return !!(value && value._isBigNumber);\n  }\n\n} // Normalize the hex string\n\nfunction toHex(value) {\n  // For BN, call on the hex string\n  if (typeof value !== \"string\") {\n    return toHex(value.toString(16));\n  } // If negative, prepend the negative sign to the normalized positive value\n\n\n  if (value[0] === \"-\") {\n    // Strip off the negative sign\n    value = value.substring(1); // Cannot have multiple negative signs (e.g. \"--0x04\")\n\n    if (value[0] === \"-\") {\n      logger.throwArgumentError(\"invalid hex\", \"value\", value);\n    } // Call toHex on the positive component\n\n\n    value = toHex(value); // Do not allow \"-0x00\"\n\n    if (value === \"0x00\") {\n      return value;\n    } // Negate the value\n\n\n    return \"-\" + value;\n  } // Add a \"0x\" prefix if missing\n\n\n  if (value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  } // Normalize zero\n\n\n  if (value === \"0x\") {\n    return \"0x00\";\n  } // Make the string even length\n\n\n  if (value.length % 2) {\n    value = \"0x0\" + value.substring(2);\n  } // Trim to smallest even-length string\n\n\n  while (value.length > 4 && value.substring(0, 4) === \"0x00\") {\n    value = \"0x\" + value.substring(4);\n  }\n\n  return value;\n}\n\nfunction toBigNumber(value) {\n  return BigNumber.from(toHex(value));\n}\n\nfunction toBN(value) {\n  const hex = BigNumber.from(value).toHexString();\n\n  if (hex[0] === \"-\") {\n    return new BN(\"-\" + hex.substring(3), 16);\n  }\n\n  return new BN(hex.substring(2), 16);\n}\n\nfunction throwFault(fault, operation, value) {\n  const params = {\n    fault: fault,\n    operation: operation\n  };\n\n  if (value != null) {\n    params.value = value;\n  }\n\n  return logger.throwError(fault, Logger.errors.NUMERIC_FAULT, params);\n} // value should have no prefix\n\n\nexport function _base36To16(value) {\n  return new BN(value, 36).toString(16);\n} // value should have no prefix\n\nexport function _base16To36(value) {\n  return new BN(value, 16).toString(36);\n}","map":{"version":3,"mappings":"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","names":["_BN","BN","hexlify","isBytes","isHexString","Logger","version","logger","_constructorGuard","MAX_SAFE","isBigNumberish","value","BigNumber","isBigNumber","match","_warnedToStringRadix","constructor","constructorGuard","hex","checkNew","new","target","throwError","errors","UNSUPPORTED_OPERATION","operation","_hex","_isBigNumber","Object","freeze","fromTwos","toBigNumber","toBN","toTwos","abs","from","substring","add","other","sub","div","o","isZero","throwFault","mul","mod","isNeg","umod","pow","and","isNegative","or","xor","mask","maskn","shl","shln","shr","shrn","eq","lt","lte","gt","gte","toNumber","error","toString","toBigInt","BigInt","e","arguments","length","warn","UNEXPECTED_ARGUMENT","toHexString","toJSON","key","type","toHex","throwArgumentError","String","anyValue","fault","params","NUMERIC_FAULT","_base36To16","_base16To36"],"sourceRoot":"","sources":["../src.ts/bignumber.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}