{"ast":null,"code":"\"use strict\";\n\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\"; // This key was provided to ethers.js by Alchemy to be used by the\n// default provider, but it is recommended that for your own\n// production environments, that you acquire your own API key at:\n//   https://dashboard.alchemyapi.io\n\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\nexport class AlchemyWebSocketProvider extends WebSocketProvider {\n  constructor(network, apiKey) {\n    const provider = new AlchemyProvider(network, apiKey);\n    const url = provider.connection.url.replace(/^http/i, \"ws\").replace(\".alchemyapi.\", \".ws.alchemyapi.\");\n    super(url, provider.network);\n    defineReadOnly(this, \"apiKey\", provider.apiKey);\n  }\n\n  isCommunityResource() {\n    return this.apiKey === defaultApiKey;\n  }\n\n}\nexport class AlchemyProvider extends UrlJsonRpcProvider {\n  static getWebSocketProvider(network, apiKey) {\n    return new AlchemyWebSocketProvider(network, apiKey);\n  }\n\n  static getApiKey(apiKey) {\n    if (apiKey == null) {\n      return defaultApiKey;\n    }\n\n    if (apiKey && typeof apiKey !== \"string\") {\n      logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n    }\n\n    return apiKey;\n  }\n\n  static getUrl(network, apiKey) {\n    let host = null;\n\n    switch (network.name) {\n      case \"homestead\":\n        host = \"eth-mainnet.alchemyapi.io/v2/\";\n        break;\n\n      case \"ropsten\":\n        host = \"eth-ropsten.alchemyapi.io/v2/\";\n        break;\n\n      case \"rinkeby\":\n        host = \"eth-rinkeby.alchemyapi.io/v2/\";\n        break;\n\n      case \"goerli\":\n        host = \"eth-goerli.alchemyapi.io/v2/\";\n        break;\n\n      case \"kovan\":\n        host = \"eth-kovan.alchemyapi.io/v2/\";\n        break;\n\n      case \"matic\":\n        host = \"polygon-mainnet.g.alchemy.com/v2/\";\n        break;\n\n      case \"maticmum\":\n        host = \"polygon-mumbai.g.alchemy.com/v2/\";\n        break;\n\n      default:\n        logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n    }\n\n    return {\n      allowGzip: true,\n      url: \"https:/\" + \"/\" + host + apiKey,\n      throttleCallback: (attempt, url) => {\n        if (apiKey === defaultApiKey) {\n          showThrottleMessage();\n        }\n\n        return Promise.resolve(true);\n      }\n    };\n  }\n\n  isCommunityResource() {\n    return this.apiKey === defaultApiKey;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;AAGA,SAASA,cAAT,QAA+B,2BAA/B;AAGA,SAA+BC,mBAA/B,QAA0D,aAA1D;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AAEA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,MAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAWC,OAAX,CAAf;AAEA,SAASE,kBAAT,QAAmC,yBAAnC,C,CAEA;AACA;AACA;AACA;;AAEA,MAAMC,aAAa,GAAG,kCAAtB;AAEA,OAAM,MAAOC,wBAAP,SAAwCN,iBAAxC,CAAyD;EAG3DO,YAAYC,OAAZ,EAAkCC,MAAlC,EAA8C;IAC1C,MAAMC,QAAQ,GAAG,IAAIC,eAAJ,CAAoBH,OAApB,EAA6BC,MAA7B,CAAjB;IAEA,MAAMG,GAAG,GAAGF,QAAQ,CAACG,UAAT,CAAoBD,GAApB,CAAwBE,OAAxB,CAAgC,QAAhC,EAA0C,IAA1C,EACwBA,OADxB,CACgC,cADhC,EACgD,iBADhD,CAAZ;IAGA,MAAMF,GAAN,EAAWF,QAAQ,CAACF,OAApB;IACAV,cAAc,CAAC,IAAD,EAAO,QAAP,EAAiBY,QAAQ,CAACD,MAA1B,CAAd;EACH;;EAEDM,mBAAmB;IACf,OAAQ,KAAKN,MAAL,KAAgBJ,aAAxB;EACH;;AAf0D;AAkB/D,OAAM,MAAOM,eAAP,SAA+BP,kBAA/B,CAAiD;EAExB,OAApBY,oBAAoB,CAACR,OAAD,EAAuBC,MAAvB,EAAmC;IAC1D,OAAO,IAAIH,wBAAJ,CAA6BE,OAA7B,EAAsCC,MAAtC,CAAP;EACH;;EAEe,OAATQ,SAAS,CAACR,MAAD,EAAY;IACxB,IAAIA,MAAM,IAAI,IAAd,EAAoB;MAAE,OAAOJ,aAAP;IAAuB;;IAC7C,IAAII,MAAM,IAAI,OAAOA,MAAP,KAAmB,QAAjC,EAA2C;MACvCN,MAAM,CAACe,kBAAP,CAA0B,gBAA1B,EAA4C,QAA5C,EAAsDT,MAAtD;IACH;;IACD,OAAOA,MAAP;EACH;;EAEY,OAANU,MAAM,CAACX,OAAD,EAAmBC,MAAnB,EAAiC;IAC1C,IAAIW,IAAI,GAAG,IAAX;;IACA,QAAQZ,OAAO,CAACa,IAAhB;MACI,KAAK,WAAL;QACID,IAAI,GAAG,+BAAP;QACA;;MACJ,KAAK,SAAL;QACIA,IAAI,GAAG,+BAAP;QACA;;MACJ,KAAK,SAAL;QACIA,IAAI,GAAG,+BAAP;QACA;;MACJ,KAAK,QAAL;QACIA,IAAI,GAAG,8BAAP;QACA;;MACJ,KAAK,OAAL;QACIA,IAAI,GAAG,6BAAP;QACA;;MACJ,KAAK,OAAL;QACIA,IAAI,GAAG,mCAAP;QACA;;MACJ,KAAK,UAAL;QACIA,IAAI,GAAG,kCAAP;QACA;;MACJ;QACGjB,MAAM,CAACe,kBAAP,CAA0B,qBAA1B,EAAiD,SAAjD,EAA4DI,SAAS,CAAC,CAAD,CAArE;IAvBP;;IA0BA,OAAO;MACHC,SAAS,EAAE,IADR;MAEHX,GAAG,EAAG,YAAY,GAAZ,GAAkBQ,IAAlB,GAAyBX,MAF5B;MAGHe,gBAAgB,EAAE,CAACC,OAAD,EAAkBb,GAAlB,KAAiC;QAC/C,IAAIH,MAAM,KAAKJ,aAAf,EAA8B;UAC1BN,mBAAmB;QACtB;;QACD,OAAO2B,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;MACH;IARE,CAAP;EAUH;;EAEDZ,mBAAmB;IACf,OAAQ,KAAKN,MAAL,KAAgBJ,aAAxB;EACH;;AAxDkD","names":["defineReadOnly","showThrottleMessage","WebSocketProvider","Logger","version","logger","UrlJsonRpcProvider","defaultApiKey","AlchemyWebSocketProvider","constructor","network","apiKey","provider","AlchemyProvider","url","connection","replace","isCommunityResource","getWebSocketProvider","getApiKey","throwArgumentError","getUrl","host","name","arguments","allowGzip","throttleCallback","attempt","Promise","resolve"],"sourceRoot":"","sources":["../src.ts/alchemy-provider.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}