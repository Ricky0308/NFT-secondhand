{"ast":null,"code":"\"use strict\";\n\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version); // Debugging line for testing browser lib in node\n//const window = { crypto: { getRandomValues: () => { } } };\n\nlet anyGlobal = null;\n\ntry {\n  anyGlobal = window;\n\n  if (anyGlobal == null) {\n    throw new Error(\"try next\");\n  }\n} catch (error) {\n  try {\n    anyGlobal = global;\n\n    if (anyGlobal == null) {\n      throw new Error(\"try next\");\n    }\n  } catch (error) {\n    anyGlobal = {};\n  }\n}\n\nlet crypto = anyGlobal.crypto || anyGlobal.msCrypto;\n\nif (!crypto || !crypto.getRandomValues) {\n  logger.warn(\"WARNING: Missing strong random number source\");\n  crypto = {\n    getRandomValues: function (buffer) {\n      return logger.throwError(\"no secure random source avaialble\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"crypto.getRandomValues\"\n      });\n    }\n  };\n}\n\nexport function randomBytes(length) {\n  if (length <= 0 || length > 1024 || length % 1 || length != length) {\n    logger.throwArgumentError(\"invalid length\", \"length\", length);\n  }\n\n  const result = new Uint8Array(length);\n  crypto.getRandomValues(result);\n  return arrayify(result);\n}\n;","map":{"version":3,"mappings":"AAAA;;AAEA,SAASA,QAAT,QAAyB,sBAAzB;AAEA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,MAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAWC,OAAX,CAAf,C,CAEA;AACA;;AAEA,IAAIE,SAAS,GAAQ,IAArB;;AACA,IAAI;EACAA,SAAS,GAAIC,MAAb;;EACA,IAAID,SAAS,IAAI,IAAjB,EAAuB;IAAE,MAAM,IAAIE,KAAJ,CAAU,UAAV,CAAN;EAA8B;AAC1D,CAHD,CAGE,OAAOC,KAAP,EAAc;EACZ,IAAI;IACAH,SAAS,GAAII,MAAb;;IACA,IAAIJ,SAAS,IAAI,IAAjB,EAAuB;MAAE,MAAM,IAAIE,KAAJ,CAAU,UAAV,CAAN;IAA8B;EAC1D,CAHD,CAGE,OAAOC,KAAP,EAAc;IACZH,SAAS,GAAG,EAAZ;EACH;AACJ;;AAED,IAAIK,MAAM,GAAQL,SAAS,CAACK,MAAV,IAAoBL,SAAS,CAACM,QAAhD;;AACA,IAAI,CAACD,MAAD,IAAW,CAACA,MAAM,CAACE,eAAvB,EAAwC;EAEpCR,MAAM,CAACS,IAAP,CAAY,8CAAZ;EAEAH,MAAM,GAAG;IACLE,eAAe,EAAE,UAASE,MAAT,EAA2B;MACxC,OAAOV,MAAM,CAACW,UAAP,CAAkB,mCAAlB,EAAuDb,MAAM,CAACc,MAAP,CAAcC,qBAArE,EAA4F;QAC/FC,SAAS,EAAE;MADoF,CAA5F,CAAP;IAGH;EALI,CAAT;AAOH;;AAED,OAAM,SAAUC,WAAV,CAAsBC,MAAtB,EAAoC;EACtC,IAAIA,MAAM,IAAI,CAAV,IAAeA,MAAM,GAAG,IAAxB,IAAiCA,MAAM,GAAG,CAA1C,IAAgDA,MAAM,IAAIA,MAA9D,EAAsE;IAClEhB,MAAM,CAACiB,kBAAP,CAA0B,gBAA1B,EAA4C,QAA5C,EAAsDD,MAAtD;EACH;;EAED,MAAME,MAAM,GAAG,IAAIC,UAAJ,CAAeH,MAAf,CAAf;EACAV,MAAM,CAACE,eAAP,CAAuBU,MAAvB;EACA,OAAOrB,QAAQ,CAACqB,MAAD,CAAf;AACH;AAAA","names":["arrayify","Logger","version","logger","anyGlobal","window","Error","error","global","crypto","msCrypto","getRandomValues","warn","buffer","throwError","errors","UNSUPPORTED_OPERATION","operation","randomBytes","length","throwArgumentError","result","Uint8Array"],"sourceRoot":"","sources":["../src.ts/browser-random.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}