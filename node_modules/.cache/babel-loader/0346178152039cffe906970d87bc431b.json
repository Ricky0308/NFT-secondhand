{"ast":null,"code":"\"use strict\";\n\nimport { Base58 } from \"@ethersproject/basex\";\nimport { arrayify, concat, hexDataSlice, hexZeroPad, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { toUtf8Bytes, UnicodeNormalizationForm } from \"@ethersproject/strings\";\nimport { pbkdf2 } from \"@ethersproject/pbkdf2\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { SigningKey } from \"@ethersproject/signing-key\";\nimport { computeHmac, ripemd160, sha256, SupportedAlgorithm } from \"@ethersproject/sha2\";\nimport { computeAddress } from \"@ethersproject/transactions\";\nimport { wordlists } from \"@ethersproject/wordlists\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst N = BigNumber.from(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\"); // \"Bitcoin seed\"\n\nconst MasterSecret = toUtf8Bytes(\"Bitcoin seed\");\nconst HardenedBit = 0x80000000; // Returns a byte with the MSB bits set\n\nfunction getUpperMask(bits) {\n  return (1 << bits) - 1 << 8 - bits;\n} // Returns a byte with the LSB bits set\n\n\nfunction getLowerMask(bits) {\n  return (1 << bits) - 1;\n}\n\nfunction bytes32(value) {\n  return hexZeroPad(hexlify(value), 32);\n}\n\nfunction base58check(data) {\n  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\n\nfunction getWordlist(wordlist) {\n  if (wordlist == null) {\n    return wordlists[\"en\"];\n  }\n\n  if (typeof wordlist === \"string\") {\n    const words = wordlists[wordlist];\n\n    if (words == null) {\n      logger.throwArgumentError(\"unknown locale\", \"wordlist\", wordlist);\n    }\n\n    return words;\n  }\n\n  return wordlist;\n}\n\nconst _constructorGuard = {};\nexport const defaultPath = \"m/44'/60'/0'/0/0\";\n;\nexport class HDNode {\n  /**\n   *  This constructor should not be called directly.\n   *\n   *  Please use:\n   *   - fromMnemonic\n   *   - fromSeed\n   */\n  constructor(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath) {\n    logger.checkNew(new.target, HDNode);\n    /* istanbul ignore if */\n\n    if (constructorGuard !== _constructorGuard) {\n      throw new Error(\"HDNode constructor cannot be called directly\");\n    }\n\n    if (privateKey) {\n      const signingKey = new SigningKey(privateKey);\n      defineReadOnly(this, \"privateKey\", signingKey.privateKey);\n      defineReadOnly(this, \"publicKey\", signingKey.compressedPublicKey);\n    } else {\n      defineReadOnly(this, \"privateKey\", null);\n      defineReadOnly(this, \"publicKey\", hexlify(publicKey));\n    }\n\n    defineReadOnly(this, \"parentFingerprint\", parentFingerprint);\n    defineReadOnly(this, \"fingerprint\", hexDataSlice(ripemd160(sha256(this.publicKey)), 0, 4));\n    defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n    defineReadOnly(this, \"chainCode\", chainCode);\n    defineReadOnly(this, \"index\", index);\n    defineReadOnly(this, \"depth\", depth);\n\n    if (mnemonicOrPath == null) {\n      // From a source that does not preserve the path (e.g. extended keys)\n      defineReadOnly(this, \"mnemonic\", null);\n      defineReadOnly(this, \"path\", null);\n    } else if (typeof mnemonicOrPath === \"string\") {\n      // From a source that does not preserve the mnemonic (e.g. neutered)\n      defineReadOnly(this, \"mnemonic\", null);\n      defineReadOnly(this, \"path\", mnemonicOrPath);\n    } else {\n      // From a fully qualified source\n      defineReadOnly(this, \"mnemonic\", mnemonicOrPath);\n      defineReadOnly(this, \"path\", mnemonicOrPath.path);\n    }\n  }\n\n  get extendedKey() {\n    // We only support the mainnet values for now, but if anyone needs\n    // testnet values, let me know. I believe current sentiment is that\n    // we should always use mainnet, and use BIP-44 to derive the network\n    //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n    //   - Testnet: public=0x043587CF, private=0x04358394\n    if (this.depth >= 256) {\n      throw new Error(\"Depth too large!\");\n    }\n\n    return base58check(concat([this.privateKey != null ? \"0x0488ADE4\" : \"0x0488B21E\", hexlify(this.depth), this.parentFingerprint, hexZeroPad(hexlify(this.index), 4), this.chainCode, this.privateKey != null ? concat([\"0x00\", this.privateKey]) : this.publicKey]));\n  }\n\n  neuter() {\n    return new HDNode(_constructorGuard, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);\n  }\n\n  _derive(index) {\n    if (index > 0xffffffff) {\n      throw new Error(\"invalid index - \" + String(index));\n    } // Base path\n\n\n    let path = this.path;\n\n    if (path) {\n      path += \"/\" + (index & ~HardenedBit);\n    }\n\n    const data = new Uint8Array(37);\n\n    if (index & HardenedBit) {\n      if (!this.privateKey) {\n        throw new Error(\"cannot derive child of neutered node\");\n      } // Data = 0x00 || ser_256(k_par)\n\n\n      data.set(arrayify(this.privateKey), 1); // Hardened path\n\n      if (path) {\n        path += \"'\";\n      }\n    } else {\n      // Data = ser_p(point(k_par))\n      data.set(arrayify(this.publicKey));\n    } // Data += ser_32(i)\n\n\n    for (let i = 24; i >= 0; i -= 8) {\n      data[33 + (i >> 3)] = index >> 24 - i & 0xff;\n    }\n\n    const I = arrayify(computeHmac(SupportedAlgorithm.sha512, this.chainCode, data));\n    const IL = I.slice(0, 32);\n    const IR = I.slice(32); // The private key\n\n    let ki = null; // The public key\n\n    let Ki = null;\n\n    if (this.privateKey) {\n      ki = bytes32(BigNumber.from(IL).add(this.privateKey).mod(N));\n    } else {\n      const ek = new SigningKey(hexlify(IL));\n      Ki = ek._addPoint(this.publicKey);\n    }\n\n    let mnemonicOrPath = path;\n    const srcMnemonic = this.mnemonic;\n\n    if (srcMnemonic) {\n      mnemonicOrPath = Object.freeze({\n        phrase: srcMnemonic.phrase,\n        path: path,\n        locale: srcMnemonic.locale || \"en\"\n      });\n    }\n\n    return new HDNode(_constructorGuard, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);\n  }\n\n  derivePath(path) {\n    const components = path.split(\"/\");\n\n    if (components.length === 0 || components[0] === \"m\" && this.depth !== 0) {\n      throw new Error(\"invalid path - \" + path);\n    }\n\n    if (components[0] === \"m\") {\n      components.shift();\n    }\n\n    let result = this;\n\n    for (let i = 0; i < components.length; i++) {\n      const component = components[i];\n\n      if (component.match(/^[0-9]+'$/)) {\n        const index = parseInt(component.substring(0, component.length - 1));\n\n        if (index >= HardenedBit) {\n          throw new Error(\"invalid path index - \" + component);\n        }\n\n        result = result._derive(HardenedBit + index);\n      } else if (component.match(/^[0-9]+$/)) {\n        const index = parseInt(component);\n\n        if (index >= HardenedBit) {\n          throw new Error(\"invalid path index - \" + component);\n        }\n\n        result = result._derive(index);\n      } else {\n        throw new Error(\"invalid path component - \" + component);\n      }\n    }\n\n    return result;\n  }\n\n  static _fromSeed(seed, mnemonic) {\n    const seedArray = arrayify(seed);\n\n    if (seedArray.length < 16 || seedArray.length > 64) {\n      throw new Error(\"invalid seed\");\n    }\n\n    const I = arrayify(computeHmac(SupportedAlgorithm.sha512, MasterSecret, seedArray));\n    return new HDNode(_constructorGuard, bytes32(I.slice(0, 32)), null, \"0x00000000\", bytes32(I.slice(32)), 0, 0, mnemonic);\n  }\n\n  static fromMnemonic(mnemonic, password, wordlist) {\n    // If a locale name was passed in, find the associated wordlist\n    wordlist = getWordlist(wordlist); // Normalize the case and spacing in the mnemonic (throws if the mnemonic is invalid)\n\n    mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);\n    return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {\n      phrase: mnemonic,\n      path: \"m\",\n      locale: wordlist.locale\n    });\n  }\n\n  static fromSeed(seed) {\n    return HDNode._fromSeed(seed, null);\n  }\n\n  static fromExtendedKey(extendedKey) {\n    const bytes = Base58.decode(extendedKey);\n\n    if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {\n      logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n    }\n\n    const depth = bytes[4];\n    const parentFingerprint = hexlify(bytes.slice(5, 9));\n    const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);\n    const chainCode = hexlify(bytes.slice(13, 45));\n    const key = bytes.slice(45, 78);\n\n    switch (hexlify(bytes.slice(0, 4))) {\n      // Public Key\n      case \"0x0488b21e\":\n      case \"0x043587cf\":\n        return new HDNode(_constructorGuard, null, hexlify(key), parentFingerprint, chainCode, index, depth, null);\n      // Private Key\n\n      case \"0x0488ade4\":\n      case \"0x04358394 \":\n        if (key[0] !== 0) {\n          break;\n        }\n\n        return new HDNode(_constructorGuard, hexlify(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);\n    }\n\n    return logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n  }\n\n}\nexport function mnemonicToSeed(mnemonic, password) {\n  if (!password) {\n    password = \"\";\n  }\n\n  const salt = toUtf8Bytes(\"mnemonic\" + password, UnicodeNormalizationForm.NFKD);\n  return pbkdf2(toUtf8Bytes(mnemonic, UnicodeNormalizationForm.NFKD), salt, 2048, 64, \"sha512\");\n}\nexport function mnemonicToEntropy(mnemonic, wordlist) {\n  wordlist = getWordlist(wordlist);\n  logger.checkNormalize();\n  const words = wordlist.split(mnemonic);\n\n  if (words.length % 3 !== 0) {\n    throw new Error(\"invalid mnemonic\");\n  }\n\n  const entropy = arrayify(new Uint8Array(Math.ceil(11 * words.length / 8)));\n  let offset = 0;\n\n  for (let i = 0; i < words.length; i++) {\n    let index = wordlist.getWordIndex(words[i].normalize(\"NFKD\"));\n\n    if (index === -1) {\n      throw new Error(\"invalid mnemonic\");\n    }\n\n    for (let bit = 0; bit < 11; bit++) {\n      if (index & 1 << 10 - bit) {\n        entropy[offset >> 3] |= 1 << 7 - offset % 8;\n      }\n\n      offset++;\n    }\n  }\n\n  const entropyBits = 32 * words.length / 3;\n  const checksumBits = words.length / 3;\n  const checksumMask = getUpperMask(checksumBits);\n  const checksum = arrayify(sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n\n  if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {\n    throw new Error(\"invalid checksum\");\n  }\n\n  return hexlify(entropy.slice(0, entropyBits / 8));\n}\nexport function entropyToMnemonic(entropy, wordlist) {\n  wordlist = getWordlist(wordlist);\n  entropy = arrayify(entropy);\n\n  if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {\n    throw new Error(\"invalid entropy\");\n  }\n\n  const indices = [0];\n  let remainingBits = 11;\n\n  for (let i = 0; i < entropy.length; i++) {\n    // Consume the whole byte (with still more to go)\n    if (remainingBits > 8) {\n      indices[indices.length - 1] <<= 8;\n      indices[indices.length - 1] |= entropy[i];\n      remainingBits -= 8; // This byte will complete an 11-bit index\n    } else {\n      indices[indices.length - 1] <<= remainingBits;\n      indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits; // Start the next word\n\n      indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n      remainingBits += 3;\n    }\n  } // Compute the checksum bits\n\n\n  const checksumBits = entropy.length / 4;\n  const checksum = arrayify(sha256(entropy))[0] & getUpperMask(checksumBits); // Shift the checksum into the word indices\n\n  indices[indices.length - 1] <<= checksumBits;\n  indices[indices.length - 1] |= checksum >> 8 - checksumBits;\n  return wordlist.join(indices.map(index => wordlist.getWord(index)));\n}\nexport function isValidMnemonic(mnemonic, wordlist) {\n  try {\n    mnemonicToEntropy(mnemonic, wordlist);\n    return true;\n  } catch (error) {}\n\n  return false;\n}\nexport function getAccountPath(index) {\n  if (typeof index !== \"number\" || index < 0 || index >= HardenedBit || index % 1) {\n    logger.throwArgumentError(\"invalid account index\", \"index\", index);\n  }\n\n  return `m/44'/60'/${index}'/0/0`;\n}","map":{"version":3,"mappings":"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","names":["Base58","arrayify","concat","hexDataSlice","hexZeroPad","hexlify","BigNumber","toUtf8Bytes","UnicodeNormalizationForm","pbkdf2","defineReadOnly","SigningKey","computeHmac","ripemd160","sha256","SupportedAlgorithm","computeAddress","wordlists","Logger","version","logger","N","from","MasterSecret","HardenedBit","getUpperMask","bits","getLowerMask","bytes32","value","base58check","data","encode","getWordlist","wordlist","words","throwArgumentError","_constructorGuard","defaultPath","HDNode","constructor","constructorGuard","privateKey","publicKey","parentFingerprint","chainCode","index","depth","mnemonicOrPath","checkNew","new","target","Error","signingKey","compressedPublicKey","path","extendedKey","neuter","_derive","String","Uint8Array","set","i","I","sha512","IL","slice","IR","ki","Ki","add","mod","ek","_addPoint","srcMnemonic","mnemonic","Object","freeze","phrase","locale","fingerprint","derivePath","components","split","length","shift","result","component","match","parseInt","substring","_fromSeed","seed","seedArray","fromMnemonic","password","entropyToMnemonic","mnemonicToEntropy","mnemonicToSeed","fromSeed","fromExtendedKey","bytes","decode","key","salt","NFKD","checkNormalize","entropy","Math","ceil","offset","getWordIndex","normalize","bit","entropyBits","checksumBits","checksumMask","checksum","indices","remainingBits","push","join","map","getWord","isValidMnemonic","error","getAccountPath"],"sourceRoot":"","sources":["../src.ts/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}