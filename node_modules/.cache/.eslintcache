[{"C:\\Users\\Chidu\\NFT-secondhand\\src\\index.js":"1","C:\\Users\\Chidu\\NFT-secondhand\\src\\reportWebVitals.js":"2","C:\\Users\\Chidu\\NFT-secondhand\\src\\App.js":"3","C:\\Users\\Chidu\\NFT-secondhand\\src\\Test.js":"4"},{"size":500,"mtime":1662954339351,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1662954339352,"results":"7","hashOfConfig":"6"},{"size":744,"mtime":1662954483747,"results":"8","hashOfConfig":"6"},{"size":9220,"mtime":1662954552696,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1hf84n",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"C:\\Users\\Chidu\\NFT-secondhand\\src\\index.js",[],"C:\\Users\\Chidu\\NFT-secondhand\\src\\reportWebVitals.js",[],"C:\\Users\\Chidu\\NFT-secondhand\\src\\App.js",[],"C:\\Users\\Chidu\\NFT-secondhand\\src\\Test.js",["19","20","21","22","23","24"],"import { useEffect, useState } from 'react';\r\nimport './App.css';\r\n\r\nimport contract from './contracts/abi.json';\r\nimport { ethers } from 'ethers';\r\n\r\nconst contractAddress = \"0xBF13b1b64C2F4E8a7767b15034160dbF172CAe6D\";\r\nconst abi = contract.abi;\r\n\r\n\r\n\r\nexport default function Test() {\r\n\r\n  const [balance, setText_0] = useState(\"\");//デポジット額保存\r\n\r\n  const [mint_mode, setText_1] = useState(\"\");//購入する巻のテキスト保存\r\n  \r\n  const [Selling_price, setText_2] = useState(\"\");//販売価格のテキスト保存\r\n  const [To, setText_3] = useState(\"\");//販売相手のアドレスを保存\r\n  const [Manga_id, setText_4] = useState(\"\");//販売するNFTの漫画idを保存\r\n\r\n  const [Buy_price, setText_5] = useState(\"\");//購入価格のテキスト保存\r\n  const [Buy_Token_id, setText_6] = useState(\"\");//購入するNFTのトークンidを保存\r\n  \r\n  const [Viewable, setText_7] = useState(\"\");//閲覧可能な巻を保存\r\n  \r\n\r\n  \r\n\r\n  const [currentAccount, setCurrentAccount] = useState(null);\r\n\r\n  const checkWalletIsConnected = async () => {\r\n    const { ethereum } = window;\r\n\r\n    if (!ethereum) {\r\n      console.log(\"Make sure you have Metamask installed!\");\r\n      return;\r\n    } else {\r\n      console.log(\"Wallet exists! We're ready to go!\")\r\n    }\r\n\r\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\r\n\r\n    if (accounts.length !== 0) {\r\n      const account = accounts[0];\r\n      console.log(\"Found an authorized account: \", account);\r\n      setCurrentAccount(account);\r\n    } else {\r\n      console.log(\"No authorized account found\");\r\n    }\r\n  }\r\n\r\n  const connectWalletHandler = async () => {\r\n    const { ethereum } = window;\r\n\r\n    if (!ethereum) {\r\n      alert(\"Please install Metamask!\");\r\n    }\r\n\r\n    try {\r\n      const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\r\n      console.log(\"Found an account! Address: \", accounts[0]);\r\n      setCurrentAccount(accounts[0]);\r\n    } catch (err) {\r\n      console.log(err)\r\n    }\r\n  }\r\n\r\n  const get_balanceHandler = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const nftContract = new ethers.Contract(contractAddress, abi, signer);\r\n\r\n        const _balance = await nftContract.get_deposit();\r\n        // console.log(_balance[\"_hex\"]);\r\n        // console.log(parseInt(_balance[\"_hex\"],16));\r\n        \r\n        setText_0(parseInt(_balance[\"_hex\"],16)/1000000000000000000)//weiからEtherに変換\r\n        \r\n      } else {\r\n        console.log(\"Ethereum object does not exist\");\r\n      }\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  \r\n  const mintNftHandler = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const nftContract = new ethers.Contract(contractAddress, abi, signer);\r\n\r\n        let nftTxn = await nftContract.mint(mint_mode, { value: ethers.utils.parseEther(\"0.05\") });\r\n\r\n        await nftTxn.wait();\r\n\r\n        console.log(mint_mode);\r\n\r\n      } else {\r\n        console.log(\"Ethereum object does not exist\");\r\n      }\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  const get_mftHandler = async () => {\r\n    var items =[];\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const nftContract = new ethers.Contract(contractAddress, abi, signer);\r\n\r\n        console.log(\"Initialize payment\");\r\n        \r\n        \r\n        for (let i = 1; i <= 5; i++){\r\n          const res = await nftContract._auth(i);\r\n          if(res===true){\r\n            items.push(i)\r\n          }\r\n        }\r\n\r\n        setText_7(items);\r\n        console.log(items);\r\n        \r\n        \r\n        console.log(\"Mining... please wait\");\r\n        return items;\r\n\r\n      } else {\r\n        console.log(\"Ethereum object does not exist\");\r\n      }\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  const approveHandler = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const nftContract = new ethers.Contract(contractAddress, abi, signer);\r\n\r\n        console.log(\"Initialize payment\");\r\n        \r\n        console.log(Selling_price);\r\n        const res = await nftContract.approve_manga(To,Manga_id,ethers.utils.parseEther(Selling_price));\r\n          \r\n        \r\n        console.log(\"Mining... please wait\");\r\n        \r\n\r\n      } else {\r\n        console.log(\"Ethereum object does not exist\");\r\n      }\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  const tradeHandler = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const nftContract = new ethers.Contract(contractAddress, abi, signer);\r\n\r\n        console.log(\"Initialize payment\");\r\n        \r\n        console.log(Selling_price);\r\n        console.log(Buy_Token_id);\r\n\r\n        const res = await nftContract.trade(Buy_Token_id,{ value: ethers.utils.parseEther(Buy_price) });\r\n          \r\n        \r\n        console.log(\"Mining... please wait\");\r\n        \r\n\r\n      } else {\r\n        console.log(\"Ethereum object does not exist\");\r\n      }\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  const withdrawHandler = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const nftContract = new ethers.Contract(contractAddress, abi, signer);\r\n\r\n        console.log(\"Initialize payment\");\r\n        \r\n        console.log(Selling_price);\r\n        const res = await nftContract.withdraw();\r\n          \r\n        \r\n        console.log(\"Mining... please wait\");\r\n        \r\n\r\n      } else {\r\n        console.log(\"Ethereum object does not exist\");\r\n      }\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  const connectWalletButton = () => {\r\n    return (\r\n      <button onClick={connectWalletHandler} className='cta-button connect-wallet-button'>\r\n        ログイン\r\n      </button>\r\n    )\r\n  }\r\n\r\n  const get_balanceButton = () => {\r\n    \r\n    return (\r\n      <button onClick={get_balanceHandler} className='cta-button connect-wallet-button'>\r\n        残高照会\r\n      </button>\r\n    )\r\n  }\r\n\r\n  const mintNftButton = () => {\r\n    return (\r\n      \r\n      <button onClick={mintNftHandler} className='cta-button mint-nft-button'>\r\n        NFTを発行(巻数を指定)\r\n      </button>\r\n    )\r\n  }\r\n\r\n  const get_nfts = () => {\r\n    return (\r\n      \r\n      <button onClick={get_mftHandler} className='cta-button mint-nft-button'>\r\n        \r\n        所持しているNFTから閲覧可能な巻を確認\r\n\r\n      </button>\r\n      \r\n\r\n      \r\n    )\r\n  }\r\n\r\n  const approve = () => {\r\n    return (\r\n      \r\n      <button onClick={approveHandler} className='cta-button mint-nft-button'>\r\n        販売\r\n\r\n      </button>\r\n    )\r\n  }\r\n\r\n  const trade = () => {\r\n    return (\r\n      \r\n      <button onClick={tradeHandler} className='cta-button mint-nft-button'>\r\n        購入\r\n\r\n      </button>\r\n    )\r\n  }\r\n\r\n  const withdraw = () => {\r\n    return (\r\n      \r\n      <button onClick={withdrawHandler} className='cta-button mint-nft-button'>\r\n        払い出し\r\n\r\n      </button>\r\n    )\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div className='main-app'>\r\n      <h1>Scrappy Squirrels Tutorial</h1>\r\n      <div>\r\n      <br/><br/>\r\n        {connectWalletButton()}<br/><br/>\r\n        {get_balanceButton()}<br/><br/>\r\n        {balance}Ether<br/><br/>\r\n        閲覧系の関数\r\n        <br/>\r\n        <input type=\"text\" value={mint_mode} onChange={(event) => setText_1(event.target.value)}/>巻\r\n        <br/>\r\n        {mintNftButton()}\r\n        <br/><br/>\r\n        {get_nfts()}<br/>\r\n\r\n        {(Viewable.toString()).split()}\r\n\r\n\r\n        \r\n        \r\n\r\n        <br/><br/>\r\n        譲渡系の関数<br/>\r\n        \r\n        <input type=\"text\" value={Selling_price} onChange={(event) => setText_2(event.target.value)}/>ether 販売価格<br/>\r\n        <input type=\"text\" value={To} onChange={(event) => setText_3(event.target.value)}/>販売する相手のアドレス<br/>\r\n        <input type=\"text\" value={Manga_id} onChange={(event) => setText_4(event.target.value)}/>Manga_id<br/>\r\n        {approve()}<br/><br/>\r\n\r\n        <input type=\"text\" value={Buy_price} onChange={(event) => setText_5(event.target.value)}/>ether 購入価格<br/>{/* 自動取得したい */}\r\n        <input type=\"text\" value={Buy_Token_id} onChange={(event) => setText_6(event.target.value)}/>Token_id<br/>\r\n        {trade()}<br/><br/>\r\n\r\n        {withdraw()}\r\n\r\n\r\n        \r\n\r\n      </div>\r\n      \r\n      \r\n    </div>\r\n  )\r\n}",{"ruleId":"25","severity":1,"message":"26","line":1,"column":10,"nodeType":"27","messageId":"28","endLine":1,"endColumn":19},{"ruleId":"25","severity":1,"message":"29","line":30,"column":10,"nodeType":"27","messageId":"28","endLine":30,"endColumn":24},{"ruleId":"25","severity":1,"message":"30","line":32,"column":9,"nodeType":"27","messageId":"28","endLine":32,"endColumn":31},{"ruleId":"25","severity":1,"message":"31","line":166,"column":15,"nodeType":"27","messageId":"28","endLine":166,"endColumn":18},{"ruleId":"25","severity":1,"message":"31","line":195,"column":15,"nodeType":"27","messageId":"28","endLine":195,"endColumn":18},{"ruleId":"25","severity":1,"message":"31","line":222,"column":15,"nodeType":"27","messageId":"28","endLine":222,"endColumn":18},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'currentAccount' is assigned a value but never used.","'checkWalletIsConnected' is assigned a value but never used.","'res' is assigned a value but never used."]